swagger: '2.0'
info:
  version: '2.1.2'
  title: Brandslisten API
  description: |
    API provided by Brandslisten GmbH
basePath: /api/v2.1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  '/categories/topics_count':
    x-swagger-router-controller: mock
    get:
      summary: |
        Get topics counts by category
      description: |
        Allows to get detailed count of topics by category and type. Returns different responses for different clients because they may have different topic types enabled. Allows filtering by category ids
      parameters:
        - name: categories[]
          in: query
          description: |
            Ids of categories that should be returned. Multiple categories have to be requested like "?categories[]=1&categories[]=2&categories[]=3"
          required: false
          type: integer
      tags:
        - Categories
        - Topics
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              total_count:
                type: integer
                description: Returns total count across categories
                example: 6
              category-path-1:
                type: object
                properties:
                  questions:
                    type: integer
                    description: count of questions
                    example: 2
                  faqs:
                    type: integer
                    description: count of questions
                    example: 3
              category-path-2:
                type: object
                properties:
                  questions:
                    type: integer
                    description: count of questions
                    example: 0
                  faqs:
                    type: integer
                    description: count of faqs
                    example: 1
  '/categories/{uuid}/tags/most_valuable':
    get:
      summary: All most valuable tags by category
      description: Returns all most valuable tags by category
      parameters:
        - name: uuid
          description: Category's UUID
          in: path
          required: true
          type: string
        - name: page
          description: Specifies the portion of list data. Defaults to 1.
          in: query
          required: false
          type: integer
        - name: per_page
          description: Number of items per page. Defaults to 5.
          in: query
          required: false
          type: integer
      responses:
        '200':
          description: Tag object
          schema:
            $ref: '#/definitions/MostValuableTagsResponse'
      tags:
        - Categories
        - Tag
  '/categories':
    get:
      summary: Get all categories
      description: Request all topics. This endpoint returns all categories
      parameters:
        - name: page
          description: Specifies the portion of list data. Defaults to 1.
          in: query
          required: false
          type: integer
        - name: per_page
          description: Number of items per page. Defaults to 10 and should be greater than 5.
          in: query
          required: false
          type: integer
        - name: order_by
          in: query
          description: |
            The field by which the results are sorted
          default: position
          required: false
          type: string
          enum:
            - position
        - name: order_dir
          in: query
          description: |
            Direction of the sorting
          default: asc
          required: false
          type: string
          enum:
            - asc
            - desc
            - rand
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              id:
                type: integer
                minimum: 1
              name:
                type: string
                description: Name of the Category
              path:
                type: string
              uuid:
                type: string
                description: The unique identifier
                format: uuid
      tags:
        - Categories
  '/categories/most_valuable':
    get:
      summary: Get all most valuable categories
      description: This endpoint returns all most valuable categories
      parameters:
        - name: page
          description: Specifies the portion of list data. Defaults to 1.
          in: query
          required: false
          type: integer
        - name: per_page
          description: Number of items per page. Defaults to 10 and should be greater than 5.
          in: query
          required: false
          type: integer
        - name: topic_type
          description: Topic type to fetch the most valuable categories. Default to Topic.
          in: query
          required: false
          type: string
        - $ref: '#/parameters/Schema'
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              id:
                type: integer
                minimum: 1
              name:
                type: string
                description: Name of the Category
              path:
                type: string
              uuid:
                type: string
                description: The unique identifier
                format: uuid
      tags:
        - Categories
  '/categories/recommended':
    get:
      summary: Get recommended categories for the current user
      description: This endpoint returns all recommended categories
      parameters:
        - name: page
          description: Specifies the portion of list data. Defaults to 1.
          in: query
          required: false
          type: integer
        - name: per_page
          description: Number of items per page. Defaults to 10 and should be greater than 5.
          in: query
          required: false
          type: integer
        - $ref: '#/parameters/Schema'
        - $ref: '#/parameters/X-User-Token'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/CategoriesResponse'
      tags:
        - Categories
  '/ad_hoc_messages':
    get:
      summary: Get ad hoc messages
      description: This endpoint returns all ad hoc messages
      parameters:
        - name: page
          description: Specifies the portion of list data. Defaults to 1.
          in: query
          required: false
          type: integer
        - name: per_page
          description: Number of items per page. Defaults to 10 and should be greater than 5.
          in: query
          required: false
          type: integer
        - $ref: '#/parameters/Schema'  
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/OrderDirParameter'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/AdHocMessagesResponse'
      tags:
        - AdHocMessages
  '/sessions':
    x-swagger-router-controller: mock
    post:
      description: |
        Log in user using email and password credentials
      consumes:
        - multipart/form-data
      produces:
        - application/json
        - multipart/form-data
      parameters:
        - name: email
          in: formData
          description: email of the user
          required: true
          type: string
          format: string
        - name: password
          in: formData
          required: true
          description: password of the user
          type: string
          format: password
      tags:
        - User
        - Authentication
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: Returns true value
              auth_token:
                description: JWT token of the user's session
                type: string
              email:
                type: string
              uuid:
                type: string
                format: uuid
        '401':
          description: Not Authorized
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: Returns false value
              message:
                type: string
                description: Reason of failure
  '/oauth/token':
    x-swagger-router-controller: mock
    post:
      description: |
        Log in user using email and password credentials
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: grant_type
          in: formData
          description: at the moment only 'client_credentials' and 'internal_user_identifier' types are supported. The type 'external_user_identifier' can be enabled for custom Logins and is different for each client.
          required: true
          type: string
          format: string
        - name: client_id
          in: formData
          description: ID of the client. Required for 'client_credentials' grant_type.
          required: false
          type: string
          format: string
        - name: client_secret
          in: formData
          description: Secret of the client. Required for 'client_credentials' grant_type.
          required: false
          type: string
          format: string
        - name: container_uuid
          in: formData
          description: ID of the container. Required for 'client_credentials' grant_type.
          required: false
          type: string
          format: string
        - name: external_user_token
          in: formData
          description: Token provided by Bl Servers. Required for 'internal_user_identifier' grant_type.
          required: false
          type: string
          format: string
      tags:
        - OAuth
        - Authentication
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: Access Token which have to be used to access data endpoints
              token_type:
                description: Type of the granted token
                type: string
              expires_in:
                type: integer
                description: Life time of the token in seconds
        '401':
          description: Not Authorized
          schema:
            type: object
            properties:
              error:
                type: string
                description: Type of the error
              error_description:
                type: string
                description: Reason of failure
        '422':
          description: Token can't be generated successfully. This Response is returned when the grant_type is 'internal_user_identifier' and the 'external_user_token' can not be decoded.
          schema:
            type: object
            properties:
              error:
                type: string
                description: Type of the error
  '/me':
    x-swagger-router-controller: mock
    get:
      description: |
        Request current User profile
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/Schema'
      tags:
        - User
      responses:
        '200':
          description: Successful response
          schema:
            - $ref: '#/definitions/User'
            - $ref: '#/parameters/HTTP_GUEST_UUID'
        '401':
          $ref: '#/responses/401'
  '/personal_feeds/count':
    x-swagger-router-controller: mock
    get:
      description: |
        Request current User feeds
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/X-User-Token'
      tags:
        - PersonalFeeds
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              feed_count:
                type: integer
                description: 'Total number of feeds'
                example: 5
        '404':
          description: 'there were an error'
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
    put:
      description: |
        Reset current User feeds
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/X-User-Token'
      tags:
        - PersonalFeeds
      responses:
        '204':
          description: Always responds with 204 code
        '404':
          description: 'there were an error'
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
  '/users/{uuid}':
    x-swagger-router-controller: mock
    get:
      description: |
        Request Registered User profile by its UUID
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/Schema'
        - name: uuid
          in: path
          description: Id of the user
          required: true
          type: string
          format: uuid
      tags:
        - User
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/User'
    patch:
      description: |
        Update Registered User profile by its UUID.
        Will reject the request if the word 'password' is present in request params.
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: Id of the user
          required: true
          type: string
          format: uuid
        - name: email
          description: Email of the user
          in: query
          required: false
          type: string
          format: email
        - name: common_name
          description: Combination of user name and surname
          in: query
          required: false
          type: string
        - name: username
          description: Nickname of the user
          in: query
          required: false
          type: string
        - name: old_password
          in: query
          description: Current password. This parameter required for non-admins when change. Admins can update just with `password` & `password_confirmation`
          required: false
          type: string
        - name: password
          description: User's password. Leave blank if it shouldn't be cahgned
          in: query
          required: false
          type: string
        - name: password_confirmation
          description: User's password confirmation
          in: query
          required: false
          type: string
      tags:
        - User
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/User'
        '403':
          description: Not Authorized
        '422':
          description: Error while saving
        '406':
          description: Not Acceptable
    delete:
      description: This endpoint deletes current's user profile
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: user's uuid
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              success:
                type: boolean
                default: true
        '401':
          description: Unauthorized
          schema:
            type: object
            properties:
              success:
                type: boolean
                default: false
      tags:
        - User
  '/user/{uuid}/different_profiles':
    x-swagger-router-controller: mock
    get:
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/Schema'
        - name: uuid
          in: path
          description: Id of the user
          required: true
          type: string
          format: uuid
      tags:
        - User
        - DifferentProfiles
      responses:
        '200':
          description: Get a paginated list of different profiles
          schema:
            $ref: '#/definitions/DifferentProfilesResponse'
        '401':
          description: there were error while creating the profile
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  general:
                    type: string
                    example: "Client not authorized"
                    description: authorization header missing or invalid

    post:
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/Schema'
        - name: uuid
          in: path
          description: Id of the user
          required: true
          type: string
          format: uuid
        - name: url
          in: body
          description: uri of different profile
          required: true
          type: string
          format: uri
      tags:
        - User
        - DifferentProfiles
      responses:
        '200':
          description: Create a new different Profile
          schema:
            $ref: '#/definitions/DifferentProfile'
        '422 (wrong input)':
          description: there were error while creating the profile
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      url:
                        type: array
                        items:
                          type: string
                          example: "is missing"
                          description: url is missing from body OR content-Type header is not set
        '422':
          description: there were error while creating the profile
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: array
                minItems: 1
                items:
                  type: string
                  enum:
                    - "URL ist bereits vergeben"
                    - "URL ist nicht gültig"
                    - "URL ist zu lang (mehr als 255 Zeichen)"
                  description: url already exists for this user;invalid url;max length exceeded (database restriction)
        '403':
          description: there were error while creating the profile
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  abilities:
                    type: array
                    items:
                      type: string
                      example: "Can not create different_profile: You are not authorized to access this page."
                      description: you are not allowed to created dfferent_profiles for this user
        '404':
          description: there were error while creating the profile
          schema:
            type: object
            properties:
              error:
                type: string
                example: "entity_not_found"
                description: user does not exist OR X-User_token is missing or invalid
        '401':
          description: there were error while creating the profile
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  general:
                    type: string
                    example: "Client not authorized"
                    description: authorization header missing or invalid
  '/users/{uuid}/statistic':
    x-swagger-router-controller: mock
    get:
      description: Request users's statistic. Returns last user's activity
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: Id of the user
          required: true
          type: string
          format: uuid
      tags:
        - User
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/UserStatistic'
  '/users/{uuid}/activities':
    x-swagger-router-controller: mock
    get:
      description: Request users's activites
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: uuid of the user
          required: true
          type: string
          format: uuid
        - name: types
          in: get-params
          description: return the activities of the user
          required: false
          type: array
          items:
            type: string
            enum:
              - NewTopicActivity
              - NewAnswerActivity
              - NewSecondLevelCommentActivity
              - NewFollowActivity
              - RateableRatedActivity
              - VoteGivenActivity
              - VoteReceivedActivity
              - SelfVoteActivity
          format: "?types[]=VoteGivenActivity&types[]=NewTopicActivity"
        - name: per_page
          description: Items per page, can be 5 to 50 (including)
          required: false
          in: query
          type: integer
        - name: order_by
          in: query
          description: |
            The field by which sort the results. The default field is `created_at`.
            Available parameters are: `created_at` and `updated_at`
          default: created_at
          required: false
          type: string
          enum:
            - created_at
            - updated_at
        - $ref: '#/parameters/OrderDirParameter'
        - name: page
          description: |
            Specifies the portion of list data. The default value is 1
          required: false
          in: query
          type: integer
        - $ref: '#/parameters/Schema'
      tags:
        - User
        - Activity
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Activity'
  '/users/{uuid}/activities/index':
    x-swagger-router-controller: mock
    post:
      description: Request users's activites. Same as GET /users/{uuid}/activities but all query params can be sent as body parameters.
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: uuid of the user
          required: true
          type: string
          format: uuid
        - name: types
          in: body
          description: return the activities of the user
          required: false
          type: array
          items:
            type: string
            enum:
              - NewTopicActivity
              - NewAnswerActivity
              - NewSecondLevelCommentActivity
              - NewFollowActivity
              - RateableRatedActivity
              - VoteGivenActivity
              - VoteReceivedActivity
              - SelfVoteActivity
          format: "?types[]=VoteGivenActivity&types[]=NewTopicActivity"
        - name: per_page
          description: Items per page, can be 5 to 50 (including)
          required: false
          in: body
          type: integer
        - name: order_by
          in: body
          description: |
            The field by which sort the results. The default field is `created_at`.
            Available parameters are: `created_at` and `updated_at`
          default: created_at
          required: false
          type: string
          enum:
            - created_at
            - updated_at
        - $ref: '#/parameters/OrderDirParameter'
        - name: page
          description: |
            Specifies the portion of list data. The default value is 1
          required: false
          in: query
          type: integer
        - $ref: '#/parameters/Schema'
      tags:
        - User
        - Activity
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Activity'
  '/users':
    get:
      description: |
        Request collection of Registered Users
      produces:
        - application/json
      parameters:
        - name: type
          description: |
            Filter users by user type.
            Possible values are user, moderator, employee, agent, admin and expert
          required: false
          in: query
          type: array
          items:
            type: string
            enum:
              - user
              - moderator
              - employee
              - agent
              - admin
              - expert
        - name: page
          description: |
            Specifies the portion of list data. The default value is 1
          required: false
          in: query
          type: integer
        - name: per_page
          description: Items per page, can be 5 to 50 (including)
          required: false
          in: query
          type: integer
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Schema'
      tags:
        - User
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/UsersResponse'
    post:
      description: |
        This endpoint give ability to register a new user using minimal set of
        required fields.
        Will reject the request if the word 'password' is present in request params.
      produces:
        - application/json
      parameters:
        - name: common_name
          in: query
          description: User's Name and Surname
          required: true
          type: string
        - name: email
          in: query
          description: email of the user
          required: true
          type: string
        - name: password
          in: query
          description: password
          required: true
          type: string
        - name: password_confirmation
          in: query
          description: password confirmation
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/User'
        '406':
          description: Not Acceptable
      tags:
        - User
  '/users/password_reset':
    x-swagger-router-controller: mock
    post:
      consumes:
        - application/json
      description: |
        Send reset password email to the user.
        Will reject the request if the word 'password' is present in request params.
      produces:
        - application/json
      parameters:
        - name: password_reset
          in: body
          description: Email of the user
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
      tags:
        - User
      responses:
        '204':
          description: Always responds with 204 code
        '406':
          description: Not Acceptable
  '/different_profiles/{uuid}':
    get:
      consumes:
        - application/json
      description: get one different profile
      produces:
        - application/json
      tags:
        - DifferentProfiles
      parameters:
        - uuid:
            type: string
            format: bl-uuid
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/Schema'
      responses:
        '200':
          schema:
            $ref: '#/definitions/DifferentProfile'
        '401':
          description: there were error while creating the profile
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  general:
                    type: string
                    example: "Client not authorized"
                    enum:
                      - "Client not authorized"
                    description: authorization header missing or invalid
    patch:
      consumes:
        - application/json
      description: update one different profile
      tags:
        - DifferentProfiles
      produces:
        - application/json
      parameters:
        - uuid:
            type: string
            format: bl-uuid
            in: path
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/Schema'
        - url:
            type: string
            format: uri
            in: body
      responses:
        '200':
          schema:
            - $ref: '#/definitions/DifferentProfile'
        '401':
          description: there were error while creating the profile
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  general:
                    type: string
                    example: "Client not authorized"
                    description: authorization header missing or invalid
        '422 (generic)':
          description: there were error while creating the profile
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  email:
                    type: string
                    example: "E-Mail-Adresse oder Passwort ungültig."
                    enum:
                      - "E-Mail-Adresse oder Passwort ungültig."
                    description: X-User-Token missing or invalid
        '422':
          description: there were error while updating the profile. The list of error is not exhaustive.
          schema:
            type: object
            properties:
              errors:
                type: string
                example: "URL ist bereits vergeben"
                enum:
                  - "is missing"
                  - "URL ist bereits vergeben"
                  - "URL ist zu lang (mehr als 255 Zeichen)"
        '403':
          description: there were error while creating the profile
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  abilites:
                    type: string
                    example: "Can not create different_profile: You are not authorized to access this page."
                    description: you are not allowed to update this entity
    delete:
      consumes:
        - application/json
      description: destroy one different profile
      tags:
        - DifferentProfiles
      produces:
        - application/json
      parameters:
        - uuid:
            type: string
            format: bl-uuid
            in: path
        - $ref: '#/parameters/X-User-Token'
      responses:
        '204':
          description: no content, success
        '401':
          description: there were error while creating the profile
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  general:
                    type: string
                    example: "Client not authorized"
                    description: authorization header missing or invalid
        '422':
          description: there were error while creating the profile
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  email:
                    type: string
                    example: "E-Mail-Adresse oder Passwort ungültig."
                    description: X-User-Token missing or invalid
        '403':
          description: there were error while creating the profile
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  abilites:
                    type: string
                    example: "Can not create different_profile: You are not authorized to access this page."
                    description: you are not allowed to update this entity
  '/containers':
    post:
      description: >
        This is the first request that should be done before place any content.
        This endpoint register a website as container and expects unique
        identifier of the website/container.


        `widget_configuration_uuid` - is a mandatory field, it is received
        during widget configuration retrieving.


        `url` - is required to track the page where the website can be found


        This operation is upsert operation and it should be done every time as
        the first request.
      produces:
        - application/json
      tags:
        - WidgetContainer
      parameters:
        - $ref: '#/parameters/X-User-Token-Optional'
        - name: widget_configuration_uuid
          in: query
          description: UUID of the widget configuration
          required: true
          type: string
          format: uuid
        - name: widget_container_uuid
          in: query
          description: UUID of the container (website)
          required: true
          type: string
        - name: name
          in: query
          description: Convenient name of container (website)
          required: true
          type: string
        - name: url
          in: query
          description: URL where the container (website) may be found
          required: true
          type: string
        - name: slug
          in: query
          description: Slug Representation of the container in the URL. Requirement depends on api-configuration
          required: false
          type: string
        - name: tags
          in: query
          description: Name of the tags that should be added to the container, alternativly one string with comma seperated tag names is also valid.
          required: false
          type: array
          items:
            type: string
        - name: categories
          description: Categories to post a question in, depending on the server configuration these can be required. There can also be a maximum.
          in: query
          type: array
          items:
            type: integer
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/WidgetContainer'
  '/containers/answer_index':
    x-swagger-router-controller: mock
    get:
      description: |
        Request all answers to all widget containers
      produces:
        - application/json
      parameters:
        - name: per_page
          in: query
          description: Items per page, can be 5 to 50 (including)
          required: false
          type: integer
        - name: page
          in: query
          description: page of objects 0 and below will be ignored/ handled as 1
          required: false
          type: integer
        - name: rating
          in: query
          description: filter answers by rating value
          required: false
          type: integer
          minimum: 1
          maximum: 5
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/CreatedAtGTE'
        - $ref: '#/parameters/CreatedAtLTE'
        - $ref: '#/parameters/UpdatedAtGTE'
        - $ref: '#/parameters/UpdatedAtLTE'
        - $ref: '#/parameters/Schema'
      tags:
        - Answer
        - WidgetContainer
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/AnswersResponse'
    post:
      description: |
        Create an Answer for particular WidgetContainer
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the widget container
          required: true
          type: string
          format: uuid
        - name: body
          required: true
          in: query
          type: string
          format: string
      tags:
        - Answer
        - WidgetContainer
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/Answer'
        '401':
          $ref: '#/responses/401'
  '/containers/{uuid}/followers/notify':
    post:
      description: >
        Sending a request to this endpoint will create an event to send an update mail to all followers of this container about an update.
        To use this endpoint, the user has to have the 'notify_followers' authorized_action.
      produces:
        - application/json
      tags:
        - Followers
        - WidgetContainer
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the widget configuration
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Succssful response
          schema:
            type: object
        '403':
          description: Not authorized response. The user authenticated by the X-User-Token does not have the ability to use this endpoint.
        '400':
          description: The the uuid parameter seams to be not formated correctly.
  '/containers/{uuid}/votes':
    x-swagger-router-controller: mock
    post:
      description: >
        Vote for a widget_container
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the WidgetContainer
          required: true
          type: string
          format: uuid
      produces:
        - application/json
      tags:
        - WidgetContainer
        - Vote
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Vote'
        '401':
          $ref: '#/responses/401'
  '/topics':
    x-swagger-router-controller: mock
    get:
      description: |
        Request all topics.
        This endpoint returns all kind of contributions
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/CreatedAtGTE'
        - $ref: '#/parameters/CreatedAtLTE'
        - $ref: '#/parameters/UpdatedAtGTE'
        - $ref: '#/parameters/UpdatedAtLTE'
        - $ref: '#/parameters/BackendUpdatedAtGTE'
        - $ref: '#/parameters/BackendUpdatedAtLTE'
        - $ref: '#/parameters/CacheTimestampGTE'
        - $ref: '#/parameters/CacheTimestampLTE'
        - name: per_page
          in: query
          description: Items per page, can be 5 to 50 (including)
          required: false
          type: integer
        - name: page
          in: query
          description: page of objects 0 and below will be ignored/ handled as 1
          required: false
          type: integer
        - name: rating
          in: query
          description: Filter by rating of the topics, does not return topics without rating
          required: false
          type: integer
        - name: type
          in: query
          description: Types of topic to return. Can include Question, Feedback, Tutorial, Faq, Article and ProductReview. Multiple Types have to be requested like "?type[]=Feedback&type[]=Question&type[]=Article"
          required: false
          type: string
        - name: categories
          in: query
          description: Ids of categories that should be returned. Multiple categories have to be requested like "?categories[]=1&categories[]=2&categories[]=3"
          required: false
          type: integer
        - name: private_group
          in: query
          description: Uuids of private groups that should be returned. Private groups have to be requested like "?private_groups[]=pg-38e348da-daad-4680-8779-9a450298ca93"
          required: false
          type: string
        - sticky:
          in: query
          description: Sort based on provided sticky. it can be requested like "sticky=category" allowed stickies are category, tag, home
          required: false
          type: string
        - name: tags
          in: query
          description: Uuids of tags that should be returned. Multiple tags have to be requested like "?tags[]=tg-91f3aa16-9872-4b41-984c-128e1df11d15&tags[]=tg-ad7509e5-f6e7-4566-821b-745771a273e1"
          required: false
          type: string
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Schema'
      tags:
        - Topic
        - WidgetContainer
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/TopicsResponse'
  '/topics/search':
    x-swagger-router-controller: mock
    get:
      description: |
        Search for Topics
      produces:
        - application/json
      parameters:
        - name: query
          in: query
          description: String to search for in all topics
          required: true
          type: string
        - name: types
          in: query
          description: Types of topic to return. Can include Question, Feedback, Tutorial, Faq, Article and ProductReview. Multiple Types have to be requested like "?type[]=Feedback&type[]=Question&type[]=Article"
          required: false
          type: string
        - name: categories
          in: query
          description: Uuids of categories that should be returned. Multiple categories have to be requested like "?categories[]=c-UUID&categories[]=c-UuId&categories[]=c-uuid"
          required: false
          type: string
        - name: categories_op
          in: query
          description: Operator for the category filter. Can be 'and' or 'or'. 'And' means the topic has to have all categories defined, 'or' returns topics with any of the defined categories.
          type: string
          required: false
          enum:
            - and
            - or
        - name: tags
          in: query
          description: Uuids of tags that should be returned. Multiple tags have to be requested like "?tags[]=tg-91f3aa16-9872-4b41-984c-128e1df11d15&tags[]=tg-ad7509e5-f6e7-4566-821b-745771a273e1"
          required: false
          type: string
        - name: tags_op
          in: query
          description: Operator for the tag filter. Can be 'and' or 'or'. 'And' means the topic has to have all tags defined, 'or' returns topics with any of the defined tags.
          type: string
          required: false
          enum:
            - and
            - or
        - name: per_page
          in: query
          description: Items per page, can be 5 to 50 (including)
          required: false
          type: integer
        - name: page
          in: query
          description: page of objects 0 and below will be ignored/ handled as 1
          required: false
          type: integer
        - name: order_by
          in: query
          description: |
            The field by which sort the results. The default field is `created_at`.
            Available parameters are: `created_at` and `updated_at`
          default: created_at
          required: false
          type: string
          enum:
            - created_at
            - updated_at
        - $ref: '#/parameters/OrderDirParameter'
      tags:
        - Topic
        - Search
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/TopicsResponse'
  '/articles':
    x-swagger-router-controller: mock
    get:
      description: |
        Request all articles.
        This endpoint returns contributions of Article type
      produces:
        - application/json
      parameters:
        - name: per_page
          in: query
          description: Items per page, can be 5 to 50 (including)
          required: false
          type: integer
        - name: page
          in: query
          description: page of objects 0 and below will be ignored/ handled as 1
          required: false
          type: integer
        - name: rating
          in: query
          description: Filter by rating of the articles, does not return articles without rating
          required: false
          type: integer
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Schema'
      tags:
        - Article
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ArticlesResponse'
  '/articles/{uuid}':
    x-swagger-router-controller: mock
    get:
      description: |
        This endpoint returns an article by its internal UUID
      parameters:
        - name: uuid
          in: path
          description: UUID of the Article
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - Article
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Article'
  '/articles/{uuid}/ratings':
    x-swagger-router-controller: mock
    post:
      description: >
        Create new Rating for the Article

      parameters:
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/HTTP_GUEST_UUID'
        - name: uuid
          required: true
          in: path
          type: string
          format: string
        - name: "value"
          required: true
          in: body
          type: integer
          format: integer
      produces:
        - application/json
      tags:
        - Article
        - Rating
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Article'
        '401':
          $ref: '#/responses/401'
  '/articles/{uuid}/comments':
    x-swagger-router-controller: mock
    get:
      description: >
        Queries answers for the article. Returns an object with an array list
        of answers and an integer total_count with the total number of matching
        answers and comments. The number of items in the list array is limited
        to 10.


      parameters:
        - name: uuid
          in: path
          description: UUID of the Article
          required: true
          type: string
          format: uuid
        - name: page
          description: |
            Specifies the portion of list data. The default value is 1,
            retrieving activities 0 to 9 (if existing).
          required: false
          in: query
          type: integer
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - Article
        - Answer
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Answer'
    post:
      description: >
        Create new Answer for the Article

      parameters:
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/Attachments'
        - name: uuid
          required: true
          in: path
          type: string
          format: string
        - name: body
          required: true
          in: query
          type: string
          format: string
      produces:
        - application/json
      tags:
        - Article
        - Answer
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/AnswersResponse'
        '401':
          $ref: '#/responses/401'
  '/containers/{uuid}/feedbacks':
    x-swagger-router-controller: mock
    get:
      description: |
        Request all feedbacks by container UUID
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: UUID of the widget container
          required: true
          type: string
          format: uuid
        - name: rating
          in: query
          description: filter feedbacks by rating value
          required: false
          type: integer
          minimum: 1
          maximum: 5
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Attachments'
        - $ref: '#/parameters/Schema'
      tags:
        - Feedback
        - WidgetContainer
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/FeedbacksResponse'
    post:
      description: |
        Create Feedback for particular WidgetContainer
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/OptionalTags'
        - name: uuid
          in: path
          description: UUID of the widget container
          required: true
          type: string
          format: uuid
        - name: title
          required: true
          in: query
          type: string
          format: string
        - name: body
          required: true
          in: query
          type: string
          format: string
        - name: slug
          in: query
          description: Slug Representation of the container/feedback in the URL. Requirement depends on api-configuration
          required: false
          type: string
        - name: rating
          required: false
          in: query
          type: integer
          minimum: 1
          maximum: 5
      tags:
        - Feedback
        - WidgetContainer
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/Feedback'
        '401':
          $ref: '#/responses/401'
  '/containers/{uuid}/statistic':
    x-swagger-router-controller: mock
    get:
      description: >
        This endpoint returns number of feedbacks grouped by its rating.
        Additionaly it returns average rating across all feedbacks.
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: UUID of the widget container
          required: true
          type: string
          format: uuid
      tags:
        - Feedback
        - WidgetContainer
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/WidgetContainerStatisticResponse'
  '/containers/{uuid}/answers':
    x-swagger-router-controller: mock
    get:
      description: |
        Request all answers by container UUID
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: UUID of the widget container
          required: true
          type: string
          format: uuid
        - name: rating
          in: query
          description: filter answers by rating value
          required: false
          type: integer
          minimum: 1
          maximum: 5
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Schema'
      tags:
        - Answer
        - WidgetContainer
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/AnswersResponse'
    post:
      description: |
        Create an Answer for particular WidgetContainer
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the widget container
          required: true
          type: string
          format: uuid
        - name: body
          required: true
          in: query
          type: string
          format: string
      tags:
        - Answer
        - WidgetContainer
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/Answer'
        '401':
          $ref: '#/responses/401'
  '/containers/{uuid}/articles':
    x-swagger-router-controller: mock
    get:
      description: |
        Request all articles by container UUID
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: UUID of the widget container
          required: true
          type: string
          format: uuid
        - name: per_page
          in: query
          description: Items per page, can be 5 to 50 (including)
          required: false
          type: integer
        - name: page
          in: query
          description: page of objects 0 and below will be ignored/ handled as 1
          required: false
          type: integer
        - name: rating
          in: query
          description: filter answers by rating value
          required: false
          type: integer
          minimum: 1
          maximum: 5
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Schema'
      tags:
        - Article
        - WidgetContainer
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ArticlesResponse'
  '/containers/{uuid}/comments':
    x-swagger-router-controller: mock
    get:
      description: |
        Request all answers by container UUID
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: UUID of the widget container
          required: true
          type: string
          format: uuid
        - name: rating
          in: query
          description: filter answers by rating value
          required: false
          type: integer
          minimum: 1
          maximum: 5
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Schema'
      tags:
        - Answer
        - Comment
        - WidgetContainer
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/AnswersResponse'
    post:
      description: |
        Create an Answer for particular WidgetContainer
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/OptionalTags'
        - name: uuid
          in: path
          description: UUID of the widget container
          required: true
          type: string
          format: uuid
        - name: body
          required: true
          in: query
          type: string
          format: string
      tags:
        - Answer
        - Comment
        - WidgetContainer
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/Answer'
        '401':
          $ref: '#/responses/401'
  '/containers/{uuid}/questions':
    x-swagger-router-controller: mock
    get:
      description: |
        Request all questions by container UUID
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: UUID of the widget container
          required: true
          type: string
          format: uuid
        - name: rating
          in: query
          description: filter topics by rating value
          required: false
          type: integer
          minimum: 1
          maximum: 5
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Schema'
      tags:
        - Question
        - WidgetContainer
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/QuestionsResponse'
    post:
      description: |
        Create Question for particular WidgetContainer
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/OptionalTags'
        - $ref: '#/parameters/Attachments'
        - name: uuid
          in: path
          description: UUID of the widget container
          required: true
          type: string
          format: uuid
        - name: title
          required: true
          in: query
          type: string
          format: string
        - name: body
          required: true
          in: query
          type: string
          format: string
        - name: slug
          in: query
          description: Slug Representation of the container/question in the URL. Requirement depends on api-configuration
          required: false
          type: string
      tags:
        - Question
        - WidgetContainer
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/Question'
        '401':
          $ref: '#/responses/401'
  '/containers/info':
    get:
      description: >
        This Endpoint returns information about products attached to containers
      produces:
        - application/json
      tags:
        - WidgetContainer
      parameters:
        - name: uuids
          in: query
          description: Filters Containers by Array of UUIDs
          required: false
          type: array
        - name: has_feedback
          in: query
          description: Returns only Containers with Feedbacks
          required: false
          type: boolean
      responses:
        '200':
          description: Succssful response
          # schema:
          #   $ref: '#/definitions/WidgetContainer'
  '/questions/{uuid}':
    x-swagger-router-controller: mock
    get:
      description: |
        This endpoint returns a question by its internal UUID
      parameters:
        - name: uuid
          in: path
          description: UUID of the Question
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - Question
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Question'
    patch:
      description: Update the Question by it's UUID
      parameters:
        - name: uuid
          in: path
          description: UUID of the Question
          required: true
          type: string
          format: uuid
        - name: title
          in: query
          description: Title of the Question
          required: false
          type: string
        - name: body
          in: query
          description: Body of the Question
          required: false
          type: string
      tags:
        - Question
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Question'
    delete:
      description: Delete the Question by it's UUID
      parameters:
        - name: uuid
          in: path
          description: UUID of the Question
          required: true
          type: string
          format: uuid
      tags:
        - Question
      responses:
        '204':
          description: Successful response
  '/questions':
    x-swagger-router-controller: mock
    post:
      description: |
        Create Question
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/OptionalTags'
        - name: title
          required: true
          in: query
          type: string
          format: string
        - name: body
          required: true
          in: query
          type: string
          format: string
        - name: slug
          in: query
          description: Slug Representation of the feedback in the URL. Requirement depends on api-configuration
          required: false
          type: string
        - name: categories
          description: Categories to post a question in, depending on the server configuration these can be required. There can also be a maximum.
          in: query
          type: array
          items:
            type: integer
        - name: attachment_ids
          in: query
          type: array
          description: IDs of assets to attach. these should be created first
          items:
            type: integer
        - name: featured_image_ids
          in: query
          type: array
          description: IDs of assets to attach. these should be created first. Featured images are meant for something like header images.
          items:
            type: integer
        - $ref: '#/parameters/CreatedAtGTE'
        - $ref: '#/parameters/CreatedAtLTE'
        - $ref: '#/parameters/UpdatedAtGTE'
        - $ref: '#/parameters/UpdatedAtLTE'
        - $ref: '#/parameters/BackendUpdatedAtGTE'
        - $ref: '#/parameters/BackendUpdatedAtLTE'
        - $ref: '#/parameters/CacheTimestampGTE'
        - $ref: '#/parameters/CacheTimestampLTE'
        - $ref: '#/parameters/Schema'
      tags:
        - Question
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/Question'
        '400':
          description: The request is missing one of the required parameters
        '401':
          $ref: '#/responses/401'
        '422':
          description: 'The question can not be saved in the database. The errors below are only a small part of the errors that can be encountered'
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: object
                properties:
                  title:
                    type: array
                    items:
                      type: string
                      description: |
                        can be one of many errors, the title could be too long or too short
                        Please read the error to find out more.
                  body:
                    type: array
                    items:
                      type: string
                      description: |
                        can be one of many errors, the body could be too long or too short
                        Please read the error to find out more.



  '/questions/{uuid}/answers':
    x-swagger-router-controller: mock
    get:
      description: >
        Queries answers for the question. Returns an object with an array list
        of answers and an integer total_count with the total number of matching
        answers and comments. The number of items in the list array is limited
        to 10.


        ##### /!\ In next versions, this endpoint will accept the only UUID as
        identifier of the topic
      parameters:
        - name: uuid
          in: path
          description: UUID of the Question
          required: true
          type: string
          format: uuid
        - name: page
          description: |
            Specifies the portion of list data. The default value is 1,
            retrieving activities 0 to 9 (if existing).
          required: false
          in: query
          type: integer
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - Question
        - Answer
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Answer'
    post:
      description: >
        Create new Answer for the Question

        ##### /!\ In next versions, this endpoint will accept the only UUID as
        identifier of the topic
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/Attachments'
        - name: uuid
          required: true
          in: path
          type: string
          format: string
        - name: body
          required: true
          in: query
          type: string
          format: string
      produces:
        - application/json
      tags:
        - Question
        - Answer
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/AnswersResponse'
        '401':
          $ref: '#/responses/401'
  '/topics/{uuid}/tags':
    get:
      summary: All topic's tags
      description: 'The list of Tags of given topic'
      parameters:
        - name: uuid
          required: true
          description: Topic's UUID
          in: path
          type: string
        - $ref: '#/parameters/Schema'
      tags:
        - Topic
        - Tag
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/TagsResponse'
  '/contributions/{uuid}':
    x-swagger-router-controller: mock
    get:
      description: |
        Returns topics of all kind (Article, FAQ, Feedback, Question and Answer, Comment)
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: string
          format: uuid
        - $ref: '#/parameters/Schema'
      tags:
        - Topic
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/TopicsResponse'
  '/contributions/{uuid}/answers':
    x-swagger-router-controller: mock
    get:
      description: |
        Returns answers for contributions (Question, Feedback, Tutorial, Article, Faq, ProducttestApplication, Topic, ParticipationRequest and WidgetContain)
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: string
          format: uuid
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
      tags:
        - Answer
        - Contribution
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/AnswersResponse'
        '422':
          description: Error response with not an answerables (if not a valid answerable of the core like categories, tags etc don’t respond to this endpoint)
  '/contributions/{uuid}/comments':
    x-swagger-router-controller: mock
    get:
      description: |
        Returns comments for contributions (Question, Feedback, Tutorial, Article, Faq, ProducttestApplication, Topic, ParticipationRequest and WidgetContain)
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: string
          format: uuid
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
      tags:
        - Comment
        - Contribution
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/AnswersResponse'
        '422':
          description: Error response with not an answerables (if not a valid answerable of the core like categories, tags etc don’t respond to this endpoint)
  '/feedbacks/{uuid}':
    x-swagger-router-controller: mock
    get:
      description: |
        This endpoint returns topic by its internal ID
      parameters:
        - name: uuid
          in: path
          description: UUID of the Feedback
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - Feedback
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Feedback'
        '401':
          $ref: '#/responses/401'
    patch:
      description: Update the Feedback by it's UUID
      parameters:
        - name: uuid
          in: path
          description: UUID of the Feedback
          required: true
          type: string
          format: uuid
        - name: title
          in: query
          description: Title of the Feedback
          required: false
          type: string
        - name: body
          in: query
          description: Body of the Feedback
          required: false
          type: string
      tags:
        - Feedback
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Feedback'
    delete:
      description: Delete the Feedback by it's UUID
      parameters:
        - name: uuid
          in: path
          description: UUID of the Feedback
          required: true
          type: string
          format: uuid
      tags:
        - Feedback
      responses:
        '204':
          description: Successful response
  '/feedbacks':
    x-swagger-router-controller: mock
    post:
      description: |
        Create Feedback
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/OptionalTags'
        - name: title
          required: true
          in: query
          type: string
          format: string
        - name: body
          required: true
          in: query
          type: string
          format: string
        - name: slug
          in: query
          description: Slug Representation of the feedback in the URL. Requirement depends on api-configuration
          required: false
          type: string
        - name: rating
          required: false
          in: query
          type: integer
          minimum: 1
          maximum: 5
        - name: categories
          description: Categories to post a feedback in, depending on the server configuration these can be required. There can also be a maximum.
          in: query
          type: array
          items:
            type: integer
        - name: attachment_ids
          in: query
          type: array
          description: IDs of assets to attach. these should be created first
          items:
            type: integer
        - name: featured_image_ids
          in: query
          type: array
          description: IDs of assets to attach. these should be created first. Featured images are meant for something like header images.
          items:
            type: integer
        - $ref: '#/parameters/CreatedAtGTE'
        - $ref: '#/parameters/CreatedAtLTE'
        - $ref: '#/parameters/UpdatedAtGTE'
        - $ref: '#/parameters/UpdatedAtLTE'
        - $ref: '#/parameters/BackendUpdatedAtGTE'
        - $ref: '#/parameters/BackendUpdatedAtLTE'
        - $ref: '#/parameters/CacheTimestampGTE'
        - $ref: '#/parameters/CacheTimestampLTE'
      tags:
        - Feedback
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/Feedback'
        '400':
          description: The request is missing one of the required parameters
        '401':
          $ref: '#/responses/401'
        '422':
          description: 'The topic can not be saved in the database. The errors below are only a small part of the errors that can be encountered'
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: object
                properties:
                  title:
                    type: array
                    items:
                      type: string
                      description: |
                        can be one of many errors, the title could be too long or too short
                        Please read the error to find out more.
                  body:
                    type: array
                    items:
                      type: string
                      description: |
                        can be one of many errors, the body could be too long or too short
                        Please read the error to find out more.
  '/feedbacks/{uuid}/answers':
    x-swagger-router-controller: mock
    get:

      description: >
        Queries answers and comments. Returns an object with an array list of
        answers and an integer total_count with the total number of matching
        answers and comments. The number of items in the list array is limited
        to 10.
      parameters:
        - name: uuid
          in: path
          description: UUID of the feedback
          required: true
          type: string
          format: uuid
        - name: page
          description: |
            Specifies the portion of list data. The default value is 1,
            retrieving activities 0 to 9 (if existing).
          required: false
          in: query
          type: integer
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - Answer
        - Feedback
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/AnswersResponse'
    post:
      description: >
        Create new Answer for Feedback

        ##### /!\ In next versions, this endpoint will accept the only UUID as
        identifier of the topic
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: string
          format: string
        - name: body
          required: true
          in: query
          type: string
          format: string
      produces:
        - application/json
      tags:
        - Answer
        - Feedback
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/AnswersResponse'
        '401':
          $ref: '#/responses/401'
  '/feedbacks/{uuid}/comments':
    x-swagger-router-controller: mock
    get:
      description: >
        Queries answers and comments. Returns an object with an array list of
        answers and an integer total_count with the total number of matching
        answers and comments. The number of items in the list array is limited
        to 10.


        ##### /!\ In next versions, this endpoint will accept the only UUID as
        identifier of the topic
      parameters:
        - name: uuid
          in: path
          description: UUID of the Feedback
          required: true
          type: string
          format: uuid
        - name: page
          description: |
            Specifies the portion of list data. The default value is 1,
            retrieving activities 0 to 9 (if existing).
          required: false
          in: query
          type: integer
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - Answer
        - Comment
        - Feedback
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/AnswersResponse'
    post:
      description: >
        Create new Answer for Feedback

        ##### /!\ In next versions, this endpoint will accept the only UUID as
        identifier of the topic
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: string
          format: string
        - name: body
          required: true
          in: query
          type: string
          format: string
      produces:
        - application/json
      tags:
        - Answer
        - Comment
        - Feedback
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/AnswersResponse'
        '401':
          $ref: '#/responses/401'
  '/feedbacks/{uuid}/votes':
    x-swagger-router-controller: mock
    post:
      description: >
        Vote for a topic


        ##### /!\ In next versions, this endpoint will accept the only UUID as
        identifier of the topic
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the Feedback
          required: true
          type: string
          format: uuid
      produces:
        - application/json
      tags:
        - Feedback
        - Vote
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Vote'
        '401':
          $ref: '#/responses/401'
  '/feedbacks/{uuid}/reports':
    x-swagger-router-controller: mock
    post:
      description: |
        Report topic content
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the Feedback
          required: true
          type: string
          format: uuid
      produces:
        - application/json
      tags:
        - Report
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Report'
        '401':
          $ref: '#/responses/401'
  '/questions/{uuid}/votes':
    x-swagger-router-controller: mock
    post:
      description: >
        Vote for a topic


        ##### /!\ In next versions, this endpoint will accept the only UUID as
        identifier of the topic
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the Feedback
          required: true
          type: string
          format: uuid
      tags:
        - Vote
        - Question
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Vote'
        '401':
          $ref: '#/responses/401'
  '/answers/{uuid}/votes':
    x-swagger-router-controller: mock
    get:
      description: |
        Votes for answers

        /!\ this action is not implemented into API 2.1 yet
      parameters:
        - name: uuid
          in: path
          description: UUID of the Answer
          required: true
          type: string
          format: uuid
      tags:
        - Answer
        - Vote
        - Not Implemented
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Votes'
    post:
      description: |
        Vote for the answer
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: integer
      produces:
        - application/json
      tags:
        - Vote
        - Answer
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Vote'
        '401':
          $ref: '#/responses/401'
  '/comments/{uuid}/votes':
    x-swagger-router-controller: mock
    get:
      description: |
        Votes for comment

        /!\ this action is not implemented into API 2.1 yet
      parameters:
        - name: uuid
          in: path
          description: UUID of the Comment
          required: true
          type: string
          format: uuid
      tags:
        - Answer
        - Vote
        - Not Implemented
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Votes'
    post:
      description: |
        Vote for the answer
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: integer
      produces:
        - application/json
      tags:
        - Vote
        - Answer
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Vote'
        '401':
          $ref: '#/responses/401'
  '/articles/{uuid}/votes':
    x-swagger-router-controller: mock
    get:
      description: |
        Votes for article
      parameters:
        - name: uuid
          in: path
          description: UUID of the article
          required: true
          type: string
          format: uuid
      tags:
        - Articles
        - Vote
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Votes'
    post:
      description: |
        Vote for the article
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: integer
      produces:
        - application/json
      tags:
        - Vote
        - Article
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Vote'
        '401':
          $ref: '#/responses/401'
  '/answers/{uuid}/comments':
    x-swagger-router-controller: mock
    post:
      description: |
        Create a Comment on Answer
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the Answer
          required: true
          type: string
          format: uuid
        - name: body
          required: true
          in: query
          type: string
          format: string
        - name: language
          required: false
          in: query
          type: string
          format: string
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - Answer
        - Comment
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/AnswersResponse'
        '401':
          $ref: '#/responses/401'
    get:
      description: |
        Request all Comments of the answer
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: Id of the answer
          required: true
          type: integer
        - $ref: '#/parameters/Schema'
      tags:
        - Answer
        - Comment
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/AnswersResponse'
  '/comments/{uuid}/comments':
    x-swagger-router-controller: mock
    post:
      description: |
        Create a Comment on Comment
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the Comment
          required: true
          type: string
          format: uuid
        - name: body
          required: true
          in: query
          type: string
          format: string
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - Answer
        - Comment
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/AnswersResponse'
        '401':
          $ref: '#/responses/401'
    get:
      description: |
        Request all Comments of the answer
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: Id of the answer
          required: true
          type: integer
        - $ref: '#/parameters/Schema'
      tags:
        - Answer
        - Comment
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/AnswersResponse'
  '/answers/{uuid}/reports':
    x-swagger-router-controller: mock
    post:
      description: |
        Report an answer
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the Answer
          required: true
          type: string
          format: uuid
        - name: body
          required: false
          in: query
          type: string
      produces:
        - application/json
      tags:
        - Answer
        - Report
      responses:
        '201':
          description: Successful response
        '401':
          $ref: '#/responses/401'
        '422':
          description: Error response
  '/answers/{uuid}':
    x-swagger-router-controller: mock
    patch:
      description: |
        Edit Answer
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the Answer
          required: true
          type: string
          format: uuid
        - name: body
          required: false
          in: query
          type: string
      produces:
        - application/json
      tags:
        - Comment
      responses:
        '201':
          description: Successful response
          schema:
            $ref: '#/definitions/AnswersResponse'
        '401':
          $ref: '#/responses/401'
        '422':
          description: Error response
    delete:
      description: |
        Delete answer. Only owner of the answer is able to delete the answer
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: string
      produces:
        - application/json
      tags:
        - Comment
      responses:
        '204':
          description: Successful response
        '401':
          $ref: '#/responses/401'
        '422':
          description: Error response
  '/answers/{uuid}/page':
    x-swagger-router-controller: mock
    get:
      description: |
        Get Answers
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the Answer
          required: true
          type: string
          format: uuid
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - Answer
      responses:
        '201':
          description: Successful response
          schema:
            $ref: '#/definitions/AnswersResponseWithPage'
  '/comments/{uuid}':
    x-swagger-router-controller: mock
    patch:
      description: |
        Edit comment
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the Comment
          required: true
          type: string
          format: uuid
        - name: body
          required: false
          in: query
          type: string
      produces:
        - application/json
      tags:
        - Comment
      responses:
        '201':
          description: Successful response
          schema:
            $ref: '#/definitions/AnswersResponse'
        '401':
          $ref: '#/responses/401'
        '422':
          description: Error response
    delete:
      description: |
        Delete comment. Only owner of the comment is able to delete the comment
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: string
      produces:
        - application/json
      tags:
        - Comment
      responses:
        '204':
          description: Successful response
        '401':
          $ref: '#/responses/401'
        '422':
          description: Error response
  '/comments/{uuid}/reports':
    x-swagger-router-controller: mock
    post:
      description: |
        Report an answer
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the Comment
          required: true
          type: string
          format: uuid
        - name: body
          required: false
          in: query
          type: string
      produces:
        - application/json
      tags:
        - Answer
        - Comment
        - Report
      responses:
        '201':
          description: Successful response
        '401':
          $ref: '#/responses/401'
        '422':
          description: Error response
  '/reports':
    x-swagger-router-controller: mock
    post:
      description: |
        Report a topic
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: reportable_uuid
          required: true
          in: query
          type: string
        - name: body
          required: false
          in: query
          type: string
      produces:
        - application/json
      tags:
        - Feedback
        - Question
        - Report
      responses:
        '201':
          description: Successful response
        '401':
          $ref: '#/responses/401'
        '422':
          description: Error response
  '/product_tests':
    x-swagger-router-controller: mock
    get:
      description: |
        Request all available Product Tests
      produces:
        - application/json
      tags:
        - ProductTest
      parameters:
        - $ref: '#/parameters/Schema'
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ProducttestsResponse'
  '/product_tests/{uuid}':
    x-swagger-router-controller: mock
    get:
      description: |
        Request details of the product test.
        Depending on the phase different fields can be returned.
      parameters:
        - name: uuid
          required: true
          in: path
          type: string
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - ProductTest
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ProducttestsResponse'
  '/product_tests/{uuid}/participants':
    x-swagger-router-controller: mock
    get:
      description: Returns all participated in product test users
      parameters:
        - name: uuid
          required: true
          in: path
          type: string
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - ProductTest
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/UsersResponse'
  '/product_tests/{uuid}/reviewers':
    x-swagger-router-controller: mock
    get:
      description: Returns all users who wrote review for this product test
      parameters:
        - name: uuid
          required: true
          in: path
          type: string
      produces:
        - application/json
      tags:
        - ProductTest
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/UsersResponse'
  '/product_tests/{uuid}/participation_requests':
    x-swagger-router-controller: mock
    get:
      description: Returns all participation requests of the users
      parameters:
        - name: uuid
          required: true
          in: path
          type: string
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - ProductTest
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ParticipationRequestsResponse'
    post:
      description: Create new participation request
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/Bearer'
        - $ref: '#/parameters/Attachments'
        - name: uuid
          required: true
          in: path
          type: string
        - name: title
          description: Participation request title
          required: true
          in: query
          type: string
          minLength: 5
          maxLength: 70
        - name: description
          description: Participation request description
          required: true
          in: query
          type: string
        - name: field_values
          description: Participation request title
          required: true
          in: body
          schema:
            type: array
            items:
              type: object
              properties:
                field_id:
                  type: string
                  description: id of the field
                value:
                  type: string
                  description: Value of the field in user friendly format
                value_raw:
                  type: string
                  description: Raw format of the value
      produces:
        - application/json
      tags:
        - ProductTest
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ParticipationRequest'
        '401':
          $ref: '#/responses/401'
  '/product_tests/{uuid}/participation_requests/new':
    x-swagger-router-controller: mock
    get:
      description: Return form data that is requeired to participate in this product test
      parameters:
        - name: uuid
          required: true
          in: path
          type: string
      produces:
        - application/json
      tags:
        - ProductTest
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ParticipationRequestsStructureResponse'
  '/product_tests/{uuid}/reviews':
    x-swagger-router-controller: mock
    get:
      description: Returns all reviews of the product test.
      parameters:
        - name: uuid
          required: true
          in: path
          type: string
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - ProductTest
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ReviewsResponse'
    post:
      description: Creates New review for the product test
      parameters:
        - $ref: '#/parameters/Bearer'
        - $ref: '#/parameters/OptionalTags'
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/Attachments'
        - name: uuid
          required: true
          in: path
          type: integer
        - name: title
          description: Participation request title
          required: true
          in: query
          type: string
          minLength: 5
          maxLength: 70
        - name: body
          description: Body of the product review
          required: true
          in: query
          type: string
          minLength: 30
        - name: body_raw
          description: |
            This field stores body of the product review in the editor
            compatible format
          required: true
          in: query
          type: string
        - name: criteria_values
          description: Participation request title
          required: true
          in: body
          schema:
            type: array
            items:
              type: object
              properties:
                field_id:
                  type: string
                  description: id of the field
                value:
                  type: string
                  description: Value of the field in user friendly format
                value_raw:
                  type: string
                  description: Raw format of the value
                rating:
                  type: integer
                  description: rating of this criteria field
                  minimum: 1
                  maximum: 5
      produces:
        - application/json
      tags:
        - ProductTest
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/Review'
        '401':
          $ref: '#/responses/401'
        '422':
          description: Error when createria value is invalid
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: object
                properties:
                  object:
                    type: object
                    properties:
                      criteria_values:
                        type: object
                        properties:
                          value:
                            type: string
                            description: invalid value of criteria
                          criteria_id:
                            type: integer
                            description: id of criteria violated
  '/product_tests/{uuid}/reviews/new':
    x-swagger-router-controller: mock
    get:
      description: Returns form structure that is required for review of this product test
      parameters:
        - name: uuid
          required: true
          in: path
          type: string
      produces:
        - application/json
      tags:
        - ProductTest
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ReviewStructure'
  '/product_tests/{uuid}/reviews/statistic':
    x-swagger-router-controller: mock
    get:
      description: Returns statistic for given product test
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: string
      produces:
        - application/json
      tags:
        - ProductTest
        - Review
        - Statistic
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ProductTestReviewsStatisticResponse'
  '/product_tests/{uuid}/statistic':
    x-swagger-router-controller: mock
    get:
      description: Returns statistic for given product test
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: string
      produces:
        - application/json
      tags:
        - ProductTest
        - Statistic
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ProductTestStatisticResponse'
        '401':
          $ref: '#/responses/401'
  '/products/{uuid}/statistic':
    x-swagger-router-controller: mock
    get:
      description: Returns statistic for given product
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: string
      produces:
        - application/json
      tags:
        - Product
        - Statistic
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ProductStatisticResponse'
        '401':
          $ref: '#/responses/401'
  '/reviews/{uuid}':
    x-swagger-router-controller: mock
    get:
      description: Returns details of the review
      parameters:
        - name: uuid
          required: true
          in: path
          type: string
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - Review
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/Review'
    patch:
      description: Update Review Request. Only owner is able to perform this request withing 30 minutes after creation
      parameters:
        - $ref: '#/parameters/Bearer'
        - $ref: '#/parameters/OptionalTags'
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: integer
        - name: title
          description: review title
          required: true
          in: query
          type: string
          minLength: 5
          maxLength: 70
        - name: body
          description: Body of the product review
          required: true
          in: query
          type: string
          minLength: 30
        - name: body_raw
          description: |
            This field stores body of the product review in the editor
            compatible format
          required: false
          in: query
          type: string
        - name: criteria_values
          description: criteria values are obligatory if producttest demands it
          required: false
          in: body
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: ID of the field value
                field:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: ID of the field
                title:
                  type: string
                  description: Title of the Product Review
                value:
                  type: string
                  description: Value of the field in user friendly format
                value_raw:
                  type: string
                  description: Raw format of the value
                rating:
                  type: integer
                  description: rating of this criteria field
                  minimum: 1
                  maximum: 5
      produces:
        - application/json
      tags:
        - Review
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/Review'
        '401':
          $ref: '#/responses/401'
    delete:
      description: |
        Delete Review. Only owner is able to perform this request
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: string
      produces:
        - application/json
      tags:
        - Review
      responses:
        '204':
          description: Successful response
        '401':
          $ref: '#/responses/401'
        '422':
          description: Error response
  '/reviews/{uuid}/comments':
    x-swagger-router-controller: mock
    get:
      description: Returns comments for the Review
      parameters:
        - name: uuid
          required: true
          in: path
          type: string
        - name: page
          description: |
            Specifies the portion of list data. The default value is 1,
            retrieving activities 0 to 9 (if existing).
          required: false
          in: query
          type: integer
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - Review
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ReivewComments'
  '/participation_requests/{uuid}':
    x-swagger-router-controller: mock
    get:
      description: Returns details of the participation request
      parameters:
        - name: uuid
          required: true
          in: path
          type: string
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - ParticipationRequest
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ParticipationRequest'
    patch:
      description: Updates participation request
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - $ref: '#/parameters/Bearer'
        - name: uuid
          required: true
          in: path
          type: string
        - name: title
          description: Participation request title
          required: true
          in: query
          type: string
          minLength: 5
          maxLength: 70
        - name: description
          description: Participation request description
          required: true
          in: query
          type: string
        - name: field_values
          description: Participation request title
          required: true
          in: body
          schema:
            type: array
            items:
              type: object
              properties:
                field:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: id of the field
                value:
                  type: string
                  description: Value of the field in user friendly format
                value_raw:
                  type: string
                  description: Raw format of the value
      produces:
        - application/json
      tags:
        - ParticipationRequest
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ParticipationRequest'
        '401':
          $ref: '#/responses/401'
    delete:
      description: |
        Delete Participation Request. Only owner is able to perform this request withing 30 minutes after creation
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: string
      produces:
        - application/json
      tags:
        - ParticipationRequest
      responses:
        '204':
          description: Successful response
        '401':
          $ref: '#/responses/401'
        '422':
          description: Error response
  '/participation_requests/{uuid}/comments':
    x-swagger-router-controller: mock
    get:
      description: Returns comments for the participation request
      parameters:
        - name: uuid
          required: true
          in: path
          type: string
        - name: page
          description: |
            Specifies the portion of list data. The default value is 1,
            retrieving activities 0 to 9 (if existing).
          required: false
          in: query
          type: integer
        - $ref: '#/parameters/OrderDirParameter'
        - $ref: '#/parameters/OrderByParameter'
        - $ref: '#/parameters/Schema'
      produces:
        - application/json
      tags:
        - ProductTest
        - ParticipationRequest
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/ParticipationRequestComments'
  '/votes':
    post:
      x-swagger-router-controller: mock
      description: >
        You can vote object when you know it's voteable UUID. It could uuid of (topics, answers and widgets)
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: votable_uuid
          in: body
          description: UUID of the voteable
          required: true
          type: string
          format: uuid
      produces:
        - application/json
      tags:
        - Vote
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/Votes'
        '401':
          description: Unauthorized
  '/votes/{uuid}':
    delete:
      x-swagger-router-controller: mock
      description: >
        You can unvote object when you know it's ID. It is possible to unvote
        object only by the owner
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          in: path
          description: UUID of the Vote
          required: true
          type: string
          format: uuid
      produces:
        - application/json
      tags:
        - Vote
      responses:
        '200':
          description: Succssful response
        '401':
          description: Unauthorized
  '/assets':
    post:
      description: Upload an asset
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: file
          description: base64 encoded file
          required: true
          in: query
          type: string
        - name: type
          description: type of the file
          required: true
          type: string
          in: query
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Asset
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/Asset'
        '401':
          description: Unauthorized
  '/assets/{id}':
    delete:
      description: Remove an asset
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: id
          required: true
          in: path
          type: string
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Asset
      responses:
        '201':
          description: Succssful response
        '401':
          description: Unauthorized
  '/users/{uuid}/notifications':
    get:
      summary: Notifications
      description: 'Notifications feed for user with given uuid when it is owner'
      parameters:
        - name: uuid
          required: true
          description: User's UUID
          in: path
          type: string
        - $ref: '#/parameters/Schema'
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Notification
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/NotificationsResponse'
  '/users/{uuid}/notifications/mark_as_read':
    put:
      summary: Mark all notification of the given user as read.
      description: Mark all notification of the given user as read. The endpoint will return the first page of the effected notifications. This response can't be repeated to get the next page and is only paginated to ensure a response that is fast and small enough to be performant. The schema parameter is supported. Because a PUT request supports a body, the schema can be inlcuded in the request body if needed.
      parameters:
        - name: uuid
          required: true
          description: User's UUID
          in: path
          type: string
        - $ref: '#/parameters/Schema'
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Notification
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/NotificationsResponse'
  '/users/{uuid}/subscriptions':
    get:
      summary: Subscriptions of the user
      description: 'Subscriptions feed for user with given uuid when it is owner'
      parameters:
        - name: uuid
          required: true
          description: User's UUID
          in: path
          type: string
        - name: type
          description: Filter subscriptions by type
          required: false
          in: query
          type: array
          items:
            type: string
            enum:
              - Category
              - Tag
              - Topic
              - User
              - FriendlyUserTest
              - ParticipationRequest
              - Producttest
              - WidgetContainer
        - $ref: '#/parameters/Schema'
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - User
        - Notification
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/SubscriptionsResponse'
  '/users/{uuid}/followers':
    get:
      summary: Followers of the user
      description: 'Returns the list of the followers of the indicated user'
      parameters:
        - name: uuid
          required: true
          description: User's UUID
          in: path
          type: string
      tags:
        - User
        - Follow
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/UsersResponse'
  '/users/{uuid}/tags':
    get:
      summary: All user's tags
      description: 'The list of Tags of given user'
      parameters:
        - name: uuid
          required: true
          description: User's UUID
          in: path
          type: string
        - $ref: '#/parameters/Schema'
      tags:
        - User
        - Tag
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/TagsResponse'
  '/tags':
    post:
      summary: 'Create a new tag'
      description: |
        Creates a new tag in the platform according to defined rules.
        The slug of the tag is generated automatically
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: name
          required: true
          description: tag name
          in: query
          type: string
      responses:
        '200':
          description: 'Tag object'
          schema:
            $ref: '#/definitions/TagResponse'
        '401':
          $ref: '#/responses/401'
      tags:
        - Tag
    get:
      summary: 'List existing tags'
      parameters:
        - $ref: '#/parameters/Schema'
      description: |
        Return list of known tags
      responses:
        '200':
          description: List of Tag objects
          schema:
            $ref: '#/definitions/TagsResponse'
      tags:
        - Tag
  '/tags/{uuid}':
    get:
      summary: 'Tag by UUID'
      description: |
        Returns tag information by UUID
      parameters:
        - name: uuid
          required: true
          in: path
          type: string
        - $ref: '#/parameters/Schema'
      responses:
        '200':
          description: Tag object
          schema:
            $ref: '#/definitions/TagResponse'
      tags:
        - Tag
  '/tags/most_valuable':
    get:
      summary: All most valuable tags
      description: Returns all most valuable tags
      parameters:
        - name: page
          in: query
          description: Specifies the portion of list data. Defaults to 1.
          required: false
          type: integer
        - name: per_page
          in: query
          description: Number of items per page. Defaults to 10.
          required: false
          type: integer
      responses:
        '200':
          description: Tag object
          schema:
            $ref: '#/definitions/MostValuableTagsResponse'
      tags:
        - Tag
  '/subscriptions':
    post:
      summary: 'Create a new Follow'
      description: |
        Creates a new follow/subscription on the object, identified with the provided uuid.
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          description: uuid of the object to follow
          in: query
          type: string
          format: '[a-z]{1,3}\-[a-z0-9]{8}\-[a-z0-9]{4}\-[a-z0-9]{4}\-[a-z0-9]{4}\-[a-z0-9]{12}'
      responses:
        '200':
          description: 'Follow Object was created'
          schema:
            $ref: '#/definitions/FollowResponse'
        '400':
          description: 'the request data uuid has an invalid format'
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: object
                properties:
                  uuid:
                    type: array
                    items:
                      type: string
        '401':
          $ref: '#/responses/401'
        '403':
          description: "Can not create Follow. Either the object is private or the current user is following this object already"
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: object
                properties:
                  abilities:
                    type: array
                    items:
                      type: string
        '404':
          description: 'The object you requested does not exists/ could not be found'
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
        '422':
          description: 'X-User-Token could be missing'
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: object
                properties:
                  email:
                    type: array
                    items:
                      type: string
      tags:
        - Follow
  '/subscriptions/{uuid}':
    get:
      summary: 'follow by Followable UUID'
      description: |
        Returns follow object when current user is following the object identified by profived uuid
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: string
          format: '[a-z]{1,3}\-[a-z0-9]{8}\-[a-z0-9]{4}\-[a-z0-9]{4}\-[a-z0-9]{4}\-[a-z0-9]{12}'
        - $ref: '#/parameters/Schema'
      responses:
        '200':
          description: Follow exists, returns follow object
          schema:
            $ref: '#/definitions/FollowResponse'
        '401':
          $ref: '#/responses/401'
        '404':
          description: 'The object you requested does not exists/ could not be found'
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
      tags:
        - Follow
    delete:
      summary: 'unfollow by Followable UUID'
      description: |
        Returns follow object when current user is following the object identified by profived uuid
      parameters:
        - $ref: '#/parameters/X-User-Token'
        - name: uuid
          required: true
          in: path
          type: string
          format: '[a-z]{1,3}\-[a-z0-9]{8}\-[a-z0-9]{4}\-[a-z0-9]{4}\-[a-z0-9]{4}\-[a-z0-9]{12}'
      responses:
        '204':
          description: returns only a status
        '401':
          $ref: '#/responses/401'
        '404':
          description: 'The object you requested does not exists/ could not be found'
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
      tags:
        - Follow
  '/statistic':
    get:
      description: 'Returns general statistics of the whole community'
      tags:
        - Statistic
      responses:
        '200':
          description: 'Successful response'
          schema:
            type: object
            properties:
              answer_count:
                type: integer
                description: 'Total number of answers'
                example: 5000
              member_count:
                type: integer
                description: 'Total number of users regardless of role'
                example: 500
              expert_count:
                type: integer
                description: 'Total number of users with expert role'
                example: 50
  '/notifications/{uuid}/mark_as_read':
    put:
      summary: Mark one notification with the given uuid as read.
      description: Mark one notification with the given uuid as read. The endpoint will return the effected notifications. The schema parameter is supported. Because a PUT request supports a body, the schema can be inlcuded in the request body if needed.
      parameters:
        - name: uuid
          required: true
          description: Notification's UUID
          in: path
          type: string
        - $ref: '#/parameters/Schema'
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Notification
      responses:
        '200':
          description: Succssful response
          schema:
            $ref: '#/definitions/Notification'
  '/swagger':
    x-swagger-pipe: swagger_raw
parameters:
  Attachments:
    name: attachment_ids
    description: IDs of the assets to attach to the entity
    type: array
    items:
      type: integer
    required: false
    in: query
  Bearer:
    name: Bearer
    description: bearer authentication with access_token from /oauth/token
    type: string
    required: true
    in: header
  X-User-Token:
    name: X-User-Token
    description: access token of the user's session
    type: string
    required: true
    in: header
  X-User-Token-Optional:
    name: X-User-Token
    description: access token of the user's session
    type: string
    in: header
  HTTP_GUEST_UUID:
    name: HTTP_GUEST_UUID
    description: response/request header name that contains JWT to identify current guest UUID
    type: string
    in: header
  OrderDirParameter:
    name: order_dir
    in: query
    description: |
      Direction of the sorting. The default direction is `desc`. Available
      parameters are: `asc`, `desc` and 'rand'. Parameter `rand' returns randomly sorted elements
    default: desc
    required: false
    type: string
  OrderByParameter:
    name: order_by
    in: query
    description: |
      The field by which sort the results. The default field is `created_at`.
      Available parameters are: `created_at`, `updated_at`, `rating`,
      `votes_count`, `last_activity_date`, `answers_count`, `view_counter`
    default: created_at
    required: false
    type: string
    enum:
      - created_at
      - updated_at
      - rating
  CreatedAtGTE:
    name: created_at_gte
    in: query
    description: Timestamp filter option, returns all objects created after or on that specific time. Must be https://en.wikipedia.org/wiki/ISO_8601
    required: false
    type: string
  CreatedAtLTE:
    name: created_at_lte
    in: query
    description: Timestamp filter option, returns all objects created before or on that specific time. Must be https://en.wikipedia.org/wiki/ISO_8601
    required: false
    type: string
  UpdatedAtGTE:
    name: updated_at_gte
    in: query
    description: Timestamp filter option, returns all objects updated (contentwise) after or on that specific time. Must be https://en.wikipedia.org/wiki/ISO_8601
    required: false
    type: string
  UpdatedAtLTE:
    name: updated_at_lte
    in: query
    description: Timestamp filter option, returns all objects updated (contentwise) before or on that specific time. Must be https://en.wikipedia.org/wiki/ISO_8601
    required: false
    type: string
  BackendUpdatedAtGTE:
    name: backend_updated_at_gte
    in: query
    description: Timestamp filter option, returns all objects updated after or on that specific time. Must be https://en.wikipedia.org/wiki/ISO_8601
    required: false
    type: string
  BackendUpdatedAtLTE:
    name: backend_updated_at_lte
    in: query
    description: Timestamp filter option, returns all objects updated before or on that specific time. Must be https://en.wikipedia.org/wiki/ISO_8601
    required: false
    type: string
  CacheTimestampGTE:
    name: cache_timestamp_gte
    in: query
    description: Timestamp filter option, returns all objects updated (self of related objects) after or on that specific time. Must be https://en.wikipedia.org/wiki/ISO_8601
    required: false
    type: string
  CacheTimestampLTE:
    name: cache_timestamp_lte
    in: query
    description: Timestamp filter option, returns all objects updated (self of related objects) before or on that specific time. Must be https://en.wikipedia.org/wiki/ISO_8601
    required: false
    type: string
  OptionalTags:
    name: tags
    in: query
    description: |
      The list of tag to attach to the contribution
    required: false
    type: array
    items:
      type: string
  Schema:
    name: schema
    in: query
    description: |
      JSON encoded field to select the exported values
      When the value of this parameter is valid, the response will only include the values defined.
      The available values for this endpoint can be taken from the example response below.
      For endpoints that returns multiple as a "list", the schema applies to each object in that list.
      Please See the 'Schema' Model below for Examples
    required: false
    type: string
definitions:
  Schema:
    type: array
    items:
      type: object
    description: |
      JSON encoded field to select the exported values.
      The value Always needs to be inside an Array.
      The Array may contain Strings or Objects.
      The Strings should match the properties you want to export.
      If the property you want to export is another object, or array of objects,
      the array can include an object, where the key(s) are the name of the property(ies) to export.
      The value of the Object(s) has Always to be an Array and is parsed like the top level.

      All examples assume the full response is a topic resonse. Please see "/topics".
      Most values are not used in this example but work in the same way.

      example:
      ```JSON
      [
        "uuid", "title", "body",
        {
          "categories": ["uuid","name","id"],
          "tags":["name"],
          "author": [
            "name",
            {
              "profile_images": [
                "file", "copyright",
                {
                  "variants":['api_medium'],
                  "uploader": ["uuid", "name"]
                }
              ]
            }
          ]
        }
      ]
      ```
      for a question.

      When only the name is provided for an Object or Array, the default fields are exported.
      The same is true when the value is null.
      You may also add fields that are not objects to the query objects, the field is exported and the values of these keys will be ignored.
      example:
      ``` JSON
      [
        {
          "uuid":'',
          "title": null,
          "body": "yes",
          "categories": ["uuid","name","id"],
          "tags":[{
            "name":"please don't"
          }],
          "author": [
            "name",
            {
              "profile_images": [
                "file", "copyright",
                {
                  "variants":['api_medium'],
                  "uploader": ["uuid", "name"]
                }
              ]
            }
          ]
        }
      ]
      ```
      will result in the same output as the previous example.
      Even when including all keys into an object, it sill has to be inside an Array.

      abbriviations:
      Certain keys can be subsituted with shorter strings, this reduces readability but also decreases the parameter length.
      implemented abbriviations are:
      u => uuid
      n => name
      t => title
      a => authorized_actions
      b => body
      br => body_raw
      d => description
      dr => description_raw
      ca => created_at
      ua => updated_at
      cs => current_user_participation_request_status
      cu => current_user_participation_request_uuid
      ap => application_phase_started_at
      cp => completed_phase_started_at
      rp => retain_phase_started_at
      tp => test_phase_started_at
      ar => application_runtime
      cr => current_user_review_uuid
      pr => participation_requests
      pt => participants_total
      prt => participation_requests_total

      this means the first example can be shortend to:
      ```JSON
      [
        "u", "title", "b",
        {
          "categories": ["u","n","id"],
          "tags":["n"],
          "author": [
            "n",
            {
              "profile_images": [
                "file", "copyright",
                {
                  "variants":['api_medium'],
                  "uploader": ["u", "n"]
                }
              ]
            }
          ]
        }
      ]
      ```
      Inline Filters:
      For properties that return an array, it can be useful to only get a certain number of items of that array.
      For instance: The producttest returns an array of upto 25 reviews, beginngign from the first created.
      With the key '_first' and '_limit', you can select the number of items the API returns. The current limit (globally) is 20.
      With the key '_last' the API returns from the end of the array, returning the newest items.
      Because this happens before the actual loading of the database rows, these entries can even be outside of the array you will receive by default.

      for example:
       ```JSON
      [
        "u", "title", "b",
        {
          "categories": ["u","n","id"],
          "tags":["n", {'_limit': 1}],
          "author": [
            "n",
            {
              "profile_images": [
                "file", "copyright",
                {
                  "variants":['api_medium'],
                  "uploader": ["u", "n"],
                  '_last': 1
                }
              ]
            }
          ]
        }
      ]
      ```
      will return only 1 tag and the last attached profile_image.


      Fields that the current user can not read, or do not exist, will be ommited instead of being null.
  NotificationsResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Notification'
  Notification:
    type: object
    required:
      - id
      - user_uuid
      - trackable_id
      - trackable_type
      - action
      - data
      - reviewed
      - announced
      - created_at
      - updated_at
    properties:
      id:
        type: integer
        description: Notification ID
      user_uuid:
        type: string
        description: User's UUID
      trackable_id:
        type: integer
        description: Trackable'ID
      trackable_type:
        type: string
        description: one Bl Type.
      action:
        type: string
        description: "Action name, like: 'authored_topic.new_answer'"
      data:
        type: object
        description: Notification related data
      reviewed:
        type: boolean
        description: if notification reviewed
        default: false
      announced:
        type: boolean
        description: if notification announced
        default: false
      created_at:
        type: string
        format: date-time
        description: Timestamp of record created
      updated_at:
        type: string
        format: date-time
        description: Timestamp of record updated
  Subscription:
    type: object
    properties:
      user:
        $ref: '#/definitions/User'
      followable_uuid:
        type: string
        description: UUID of the object
      followable_type:
        type: string
        description: Type of the object
      followable:
        allOf:
          - $ref: '#/definitions/ModelWithUUID'
          - type: object
            required:
              - type
              - authorized_actions
              - created_at
              - updated_at
            properties:
              type:
                type: string
              authorized_actions:
                type: array
                items:
                  type: string
              created_at:
                type: string
                format: date-time
                description: Timestamp of record created
              updated_at:
                type: string
                format: date-time
                description: Timestamp of record updated
  User:
    allOf:
      - $ref: '#/definitions/ModelWithTimestamps'
      - $ref: '#/definitions/ModelWithUUID'
      - $ref: '#/definitions/ModelWithPageObject'
      - type: object
        description: User
        required:
          - name
          - username
        properties:
          name:
            type: string
            description: |
              This is basically the display-name of the user on the platform. It
              returns the username if it is defined, common_name otherwise.
            default: John
          username:
            type: string
            description: An unique alias of the user. The default value is an empty string.
            default: John
          common_name:
            type: string
            description: The real name of the user. Required.
          slug:
            type: string
            description: URL save string for routes.
          about_me:
            type: string
            description: |
              A short text where the user describes himself. The default value
              is null.
            default: I'm the choosen one
          tiers:
            $ref: '#/definitions/Tiers'
            description: List of tiers or agent groups
          gamification_score:
            description: Amount of gamification points for this user. Returns 0 when the user has refused to participate.
            type: integer
            minimum: 0
            example: 42
          level:
            description: Current Gamification level of the user. Object is empty when the user has refused gamification participation or gamification is not available.
            type: object
            properties:
              name:
                type: string
                description: Internal name of the current level
                example: climer
              score:
                type: integer
                description: Minimum points to reach this Level
                example: 16
              show_in_list:
                type: boolean
                description: Should this level show up on the Gamification information page?
                example: true
              index:
                type: integer
                description: Index of the level, beginging with 0
                minimum: 0
                example: 1
          role:
            type: string
            description: role of the user
            example: expert
          total_posts:
            type: integer
            description: Total number of posts made by user
          avatar:
            $ref: '#/definitions/Asset'
            description: The newest Profile Image
          profile_images:
            $ref: '#/definitions/ProfileImages'
          wallpapers:
            $ref: '#/definitions/Wallpapers'
          url:
            type: string
            description: |
              The full URL of the user page. Per default it is
              https://your.domain/users/name where "name" is the URL-encoded
              name.
          notifications_count:
            type: object
            properties:
              unread:
                type: integer
              total:
                type: integer
          online:
            type: boolean
  SubscriptionsResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Subscription'
  UsersResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/User'
  UserStatistic:
    type: object
    description: Overview of user's activity
    required:
      - feedbacks
      - answers
      - votes
    properties:
      feedbacks:
        type: object
        required:
          - total_count
          - list
        properties:
          total_count:
            description: Total number of feedbacks that user left
            type: integer
          list:
            type: array
            items:
              $ref: '#/definitions/Topic'
      answers:
        type: object
        required:
          - total_count
          - list
        properties:
          total_count:
            description: Total number of feedbacks that user left
            type: integer
          list:
            type: array
            items:
              $ref: '#/definitions/Answer'
      votes:
        type: object
        required:
          - total_count
          - list
        properties:
          total_count:
            description: Total number of feedbacks that user left
            type: integer
          list:
            type: array
            items:
              $ref: '#/definitions/Vote'
  Gamification:
    type: object
    description: An object containing the gamification details of the user
    required:
      - level
      - score
    properties:
      level:
        type: integer
        description: |
          An integer representing the current experience level of the user based
          on his score.
        minimum: 0
        maximum: 5
      score:
        type: number
        description: |
          The sum of all points gathered through different actions like posting
          a new topic or receiving a vote on ones answer. Different actions
          yield different (configurable) amounts of points.
        minimum: 0
        maximum: 5
  WidgetContainer:
    allOf:
      - $ref: '#/definitions/ModelWithTimestamps'
      - $ref: '#/definitions/ModelWithUUID'
      - type: object
        required:
          - name
          - url
          - feedbacks
          - statistic
        properties:
          feedbacks:
            type: array
            items:
              $ref: '#/definitions/Topic'
          name:
            type: string
            description: Name of the item been reviewed
          url:
            type: string
            description: Page where the container (website) can be found
          statistic:
            type: object
            properties:
              '1':
                description: Number of feedbacks with rating of 1
                type: integer
                minimum: 0
              '2':
                description: Number of feedbacks with rating of 2
                type: integer
                minimum: 0
              '3':
                description: Number of feedbacks with rating of 3
                type: integer
                minimum: 0
              '4':
                description: Number of feedbacks with rating of 4
                type: integer
                minimum: 0
              '5':
                description: Number of feedbacks with rating of 5
                type: integer
                minimum: 0
  BaseTopic:
    type: object
    required:
      - title
      - body
      - author
      - status
    properties:
      title:
        type: string
        description: The title text of the topic.
      body:
        type: string
        description: |
          The body text of the topic. It may contain some basic HTML, restricted
          to the following tags: p, br, blockquote, ol, ul, li, a (including
          attributes href, title, target), em, i, strong, b.
        default: |
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent nec
          purus dui. Nulla quis lectus iaculis, porttitor est sit amet, cursus
          lectus. Aenean ac tortor vel arcu rutrum blandit
      uft8_body:
        type: string
        description: |
          The body text of the topic. It may contain some basic HTML, restricted
          to the following tags: p, br, blockquote, ol, ul, li, a (including
          attributes href, title, target), em, i, strong, b.
          This version transforms internal emojie representations like :smile:
          to UTF-8 characters
        default: |
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent nec
          purus dui. Nulla quis lectus iaculis, porttitor est sit amet, cursus
          lectus. Aenean ac tortor vel arcu rutrum blandit
      body_raw:
        type: string
        description: Free field to store a representation of the body, not used by the community frontend.
      slug:
        type: string
        description: url-safe string generated from the title to be used as human readable identifier
      author:
        $ref: '#/definitions/User'
      type:
        type: string
        description: |
          The content type of the topic. Possible values are Question,
          Feedback, Tutorial, Article, and Faq.
        enum:
          - Topic
          - Article
          - Feedback
          - Faq
          - Tutorial
          - ProductReview
          - ProducttestApplication
          - Question
      last_activity_at:
        type: string
        format: date-time
      backend_updated_at:
        type: string
        format: date-time
      cache_timestamp:
        type: string
        format: date-time
      published_at:
        type: string
        format: date-time
      featured_images:
        type: array
        items:
          $ref: '#/definitions/Asset'
        description: Images intended for use in streams or header images, Set via featured_image_ids.
      attachments:
        type: array
        items:
          $ref: '#/definitions/Asset'
        description: Files intended for use as attachments, like pdf documents and images. Set via attachment_ids property.
      assignee:
        $ref: '#/definitions/User'
      correct_answer_uuid:
        type: string
        format: uuid
      recent_report_id:
        type: integer
      # StatusFlags
      fresh:
        type: boolean
        description: Has the Topic not been answered to in a configurable timeframe, after being created? This status only is true when no answer was given yet.
      edited_by:
        $ref: '#/definitions/User'
        description: User that last updated the topic
      edited_at:
        type: string
        format: date-time
        description: When a topic was last edited
      sticky:
        type: object
        description: Location on which topics can be sticky.
        properties:
          localtion:
            type: array
            items:
              type: string
              enum:
                - home
                - category
                - taglist
          until:
            type: string
            format: date-time
            description: timestamp
      status:
        type: string
        description: Status of the Topic
        default: fresh
        enum:
          - draft
          - published
      comments_enabled:
        type: boolean
        description: Are comments/answers allowed on this topic in general? Default false for FAQ otherwise true.
      solved:
        type: boolean
        description: Was this topic marked as solved? This flag does not include that a correct answer exists, or is pubically available.
      closed:
        type: boolean
        description: Discussions on a closed topic are disabled and this topic is marked as irrelevant for further disscussions, either because it is too old or the discusstion de-railed
      archived:
        type: boolean
      private:
        type: boolean
        description: Only the author and the Community team can see these topics.
      trashed:
        type: boolean
        description: Topic is soft-deleted and not available in the frontend to normal users.
      trashed_at:
        type: string
        format: date-time
      trashed_by:
        $ref: '#/definitions/User'
      statistics:
        type: object
        properties:
          vote_count:
            type: integer
            minimum: 0
          answer_count:
            type: integer
            minimum: 0
          view_count:
            type: integer
            minimum: 0
          discussion_count:
            type: integer
            minimum: 0
      average_rating:
        type: float
  Topic:
    allOf:
      - $ref: '#/definitions/ModelWithTimestamps'
      - $ref: '#/definitions/ModelWithID'
      - $ref: '#/definitions/ModelWithUUID'
      - $ref: '#/definitions/ModelWithTags'
      - $ref: '#/definitions/ModelWithCategories'
      - $ref: '#/definitions/ModelWithPrivateGroup'
      - $ref: '#/definitions/ModelWithCurrentUserVoteID'
      - $ref: '#/definitions/BaseTopic'
      - $ref: '#/definitions/ModelWithPageObject'
      - $ref: '#/definitions/ModelWithRating'
      - $ref: '#/definitions/ModelWithUserRatingInfo'
      - $ref: '#/definitions/ModelWithLanguage'
  ProductReview:
    allOf:
      - $ref: '#/definitions/ModelWithTimestamps'
      - $ref: '#/definitions/ModelWithUUID'
      - $ref: '#/definitions/ModelWithCurrentUserVoteID'
      - type: object
        properties:
          title:
            type: string
            description: The title text of the topic.
          body:
            type: string
            description: |
              The body text of the topic. It may contain some basic HTML, restricted
              to the following tags: p, br, blockquote, ol, ul, li, a (including
              attributes href, title, target), em, i, strong, b.
            default: |
              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent nec
              purus dui. Nulla quis lectus iaculis, porttitor est sit amet, cursus
              lectus. Aenean ac tortor vel arcu rutrum blandit
          criteria_values:
            type: array
            items:
              - $ref: '#/definitions/CriteriaValue'
          attachments:
            type: array
            items:
              $ref: '#/definitions/Asset'
            description: Images intended for use as attachments, like pdf documents
  Feedback:
    allOf:
      - $ref: '#/definitions/ModelWithTimestamps'
      - $ref: '#/definitions/ModelWithUUID'
      - $ref: '#/definitions/ModelWithTags'
      - $ref: '#/definitions/ModelWithCategories'
      - $ref: '#/definitions/ModelWithPrivateGroup'
      - $ref: '#/definitions/ModelWithCurrentUserVoteID'
      - $ref: '#/definitions/BaseTopic'
      - $ref: '#/definitions/ModelWithPageObject'
      - $ref: '#/definitions/ModelWithRating'
      - $ref: '#/definitions/ModelWithLanguage'
  Article:
    allOf:
      - $ref: '#/definitions/ModelWithTimestamps'
      - $ref: '#/definitions/ModelWithUUID'
      - $ref: '#/definitions/ModelWithTags'
      - $ref: '#/definitions/ModelWithCategories'
      - $ref: '#/definitions/ModelWithCurrentUserVoteID'
      - $ref: '#/definitions/BaseTopic'
      - $ref: '#/definitions/ModelWithPageObject'
      - $ref: '#/definitions/ModelWithAnswers'
      - $ref: '#/definitions/ModelWithLanguage'
      - $ref: '#/definitions/ModelWithRating'
  Faq:
    allOf:
      - $ref: '#/definitions/ModelWithTimestamps'
      - $ref: '#/definitions/ModelWithUUID'
      - $ref: '#/definitions/ModelWithTags'
      - $ref: '#/definitions/ModelWithCategories'
      - $ref: '#/definitions/ModelWithCurrentUserVoteID'
      - $ref: '#/definitions/BaseTopic'
      - $ref: '#/definitions/ModelWithPageObject'
      - $ref: '#/definitions/ModelWithMood'
      - $ref: '#/definitions/ModelWithRating'
  Question:
    allOf:
      - $ref: '#/definitions/BaseTopic'
      - $ref: '#/definitions/ModelWithPageObject'
      - $ref: '#/definitions/ModelWithTags'
      - $ref: '#/definitions/ModelWithUUID'
      - $ref: '#/definitions/ModelWithCategories'
      - $ref: '#/definitions/ModelWithPrivateGroup'
      - $ref: '#/definitions/ModelWithCurrentUserVoteID'
      - $ref: '#/definitions/ModelWithMood'
      - $ref: '#/definitions/ModelWithAnswers'
    properties:
      correct_answer:
        $ref: '#/definitions/Answer'
  Answer:
    allOf:
      - $ref: '#/definitions/ModelWithTimestamps'
      - $ref: '#/definitions/ModelWithID'
      - $ref: '#/definitions/ModelWithUUID'
      - $ref: '#/definitions/ModelWithTags'
      - $ref: '#/definitions/ModelWithPageObject'
      - $ref: '#/definitions/ModelWithCurrentUserVoteID'
      - type: object
        required:
          - body
          - author
          - private
          - mood
        properties:
          body:
            type: string
            description: |
              The body text of the answer. It may contain some basic HTML,
              restricted to the following tags: p, br, blockquote, ol, ul, li, a
              (including attributes href, title, target), em, i, strong, b.
            default: Shall I compare thee to a summer’s day?
          author:
            $ref: '#/definitions/User'
          answerable_uuid:
            type: integer
            minimum: 1
            description: The unique identifier of the answered item.
          answerable_type:
            type: string
            description: The type of the answered item. May be any Topic, Answer, ParticipationRequest, or WidgetContainer.
            default: Feedback
          answerable:
            type: object
            description: Representation of the answerable, may be any of the answerable_types. Not supported types will be represented by on empty object.
          private:
            type: boolean
            description: |
              The answer will only be accessible to agents and the user who
              posted it
            default: false
          solution:
            type: boolean
            description: |
              True, if the answer is the accepted solution to the question. Only
              applicable if the answerable_type is a topic of the type Question
            default: false
          mood:
            type: integer
            minimum: 0
            maximum: 5
            description: |
              A number representing the mood of the answering user. Higher
              numbers mean better mood. Per default, numbers from 1 to 4 are
              supported and presented in the form of smileys.
          rating:
            type: integer
            minimum: 0
            description: 'Deprecated, will be removed.'
          recent_report_id:
            type: integer
            minimum: 1
            description: |
              The unique identifier of the last report filed by users about the
              current answer. Will only be accessible to team members. The
              default value is null.
          attachments:
            type: array
            description: An array of IDs of Assets. The default value is an empty array.
            items:
              $ref: '#/definitions/Assets'
          statistics:
            $ref: '#/definitions/Statistic'
          edited_by:
            $ref: '#/definitions/User'
            description: User that last updated the comment
          edited_at:
            type: string
            format: date-time
            description: When the comment was last edited
  Tag:
    description: Tag object
    allOf:
      - $ref: '#/definitions/ModelWithUUID'
      - type: object
        required:
          - name
          - slug
        properties:
          name:
            type: string
            description: Human readable representation of the tag
          slug:
            type: string
            description: Representation of the tag in the URL
          statistics:
            type: object
            properties:
              topics_count:
                type: integer
                description: public topics count
              follows_count:
                type: integer
                description: number of users following this category
  Category:
    description: Category Object
    allOf:
      - $ref: '#/definitions/ModelWithUUID'
      - $ref: '#/definitions/ModelWithID'
      - $ref: '#/definitions/ModelWithTimestamps'
      - $ref: '#/definitions/ModelWithPageObject'
      - type: object
        properties:
          name:
            type: string
            description: Name of the Category
          description:
            type: string
            description: Description for the Category and its intended contents
          path:
            type: string
            description: Part of the nestable categories feature. Will be something like "grant-parent-slug/parent-slug/child-slug". Will be the same as the slug for root categories.
          position:
            type: integer
            description: Categories can be ordered with this field
          available_for:
            type: array
            description: Returns a list of topic types which are allowed to be attached to this category
            items:
              type: string
          image:
            $ref: '#/definitions/Assets'
          thumbnail:
            $ref: '#/definitions/Assets'
          icon:
            $ref: '#/definitions/Assets'
          statistics:
            type: object
            properties:
              topic_count:
                type: integer
              follower_count:
                type: integer
          children:
            type: array
            items:
              $ref: '#/definitions/Category'
          headline_color:
            type: string
            description: A color field, returns a string like '#d5d5d5'
          description_color:
            type: string
            description: A color field, returns a string like '#d5d5d5'
          blurred_image_alpha:
            type: number
            description: Intended for an Alpha value for styling purposes
            minimum: 0.0
            maximum: 1.0
  CategoriesResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Category'
  PrivateGroup:
    description: Private Group Object / FriendlyUserTest
    allOf:
      - $ref: '#/definitions/ModelWithUUID'
      - $ref: '#/definitions/ModelWithID'
      - $ref: '#/definitions/ModelWithTimestamps'
      - $ref: '#/definitions/ModelWithPageObject'
      - type: object
        properties:
          name:
            type: string
            description: Name of the Group
          active:
            type: boolean
            description: Is this group currently enabled?
          description:
            type: string
            description: Description for the Group and its intended contents
          statistics:
            type: object
            properties:
              topic_count:
                type: integer
              follower_count:
                type: integer
          headline_color:
            type: string
            description: A color field, returns a string like '#d5d5d5'
          description_color:
            type: string
            description: A color field, returns a string like '#d5d5d5'
          blurred_image_alpha:
            type: number
            description: Intended for an Alpha value for styling purposes
            minimum: 0.0
            maximum: 1.0
  CriteriaValue:
    allOf:
      - $ref: '#/definitions/ModelWithID'
      - type: object
        properties:
          field:
            $ref: '#/definitions/Field'
          value:
            type: string
            description: HTML-able field
          rating:
            type: integer
          group:
            type: object
            description: Can be any 'group'. Default is a Producttest
          user:
            $ref: '#/definitions/User'
  Producttest:
    description: >
      Product Test may be in the one of free phases: introduction, testing,
      final
    allOf:
      - $ref: '#/definitions/ModelWithTimestamps'
      - $ref: '#/definitions/ModelWithID'
      - type: object
        required:
          - name
          - description
          - phase
          - application_introduction
          - application_closing_text
          - test_introduction
          - test_review_introduction
          - test_closing_text
          - invite_text
          - decline_text
          - conditions
          - application_runtime
          - participations_limit
          - test_limit
          - is_teaser
          - draft
          - featured_images
          - products
          - opened_at
          - starts_at
          - test_runtime
          - closed_at
          - statictics
          - participation_requests
          - reviews
          - authorized_actions
          - application_phase_started_at
          - test_phase_started_at
          - completed_phase_started_at
        properties:
          name:
            type: string
            description: Name of the product test
          description:
            type: string
            description: General description
          phase:
            type: string
            description: Name of the current phase for this product test
            enum:
              - introduction
              - testing
              - final
          application_introduction:
            type: string
            description: Introduction text on application form
          application_closing_text:
            type: string
            description: Closing text below application form
          test_introduction:
            type: string
            description: Introduction text
          test_review_introduction:
            type: string
            description: Test review phase introduction text
          test_closing_text:
            type: string
            description: The conclusion of the text
          invite_text:
            type: string
            description: Text for invite mail
          decline_text:
            type: string
            description: Text for decline mail
          conditions:
            type: string
            description: Terms and Conditions
          application_runtime:
            type: integer
            description: Runtime of application phase in days
          participations_limit:
            type: integer
            description: Number of users who can participate
          test_limit:
            type: integer
            description: Maximum number of the test reviews
          is_teaser:
            type: boolean
            description: If this product test is teaser for the client
          draft:
            type: boolean
            description: Draft flag
          products:
            type: array
            description: List of products included into this product test
            items:
              $ref: '#/definitions/Product'
          featured_images:
            type: array
            description: Images
            items:
              $ref: '#/definitions/Asset'
          thumbnails:
            type: array
            description: Images
            items:
              $ref: '#/definitions/Asset'
          info_product:
            type: object
            required:
              - name
              - link
              - image
            properties:
              name:
                type: string
                description: String for product name
              link:
                type: string
                description: String for product link
              image:
                type: object
                description: The image appears in the sidebar of the product test detail page
                $ref: '#/definitions/Asset'
          info_sponsor:
            type: object
            required:
              - name
              - link
              - image
            properties:
              name:
                type: string
                description: String for sponsor name
              link:
                type: string
                description: String for sponsor link
              image:
                type: object
                description: The sponsor image appears in the sidebar of the product test detail page
                $ref: '#/definitions/Asset'
          opened_at:
            type: string
            format: date-time
            description: Timestamp of application start
          starts_at:
            type: string
            format: date-time
            description: Timestamp of tests start
          test_runtime:
            type: integer
            description: Runtime of test phase in days
          closed_at:
            type: string
            format: date-time
            description: Date when test phase finishing
          statictics:
            $ref: '#/definitions/Statistic'
          participation_requests:
            description: Available only during the period of the "Introduction Phase"
            type: array
            items:
              $ref: '#/definitions/ParticipationRequest'
          reviews:
            description: Available only during the period of "Final Phase"
            type: array
            items:
              $ref: '#/definitions/Review'
          application_phase_started_at:
            description: DateTime when application phase is stated
            type: string
            format: date-time
          test_phase_started_at:
            description: DateTime when test phase is stated
            type: string
            format: date-time
          completed_phase_started_at:
            description: DateTime when test phase is finished
            type: string
            format: date-time
          authorized_actions:
            type: array
            items:
              type: string
              enum:
                - new_participation_request
                - new_review
          application_phase_text:
            description: Rich text for application phase
            type: string
          preparation_phase_text:
            description: Rich text for preparation phase
            type: string
          test_phase_text:
            description: Rich text for test phase
            type: string
          final_phase_text:
            description: Rich text for final phase
            type: string
          test_package_text:
            description: Rich text for test package
            type: string
  ProducttestsResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Producttest'
  ProductTestReviewsStatisticResponse:
    type: object
    required:
      - list
    properties:
      list:
        type: array
        items:
          type: object
          required:
            - id
            - name
            - values
          properties:
            id:
              type: integer
              minimum: 1
            name:
              type: string
            "values":
              type: object
              required:
                - 1
                - 2
                - 3
                - 4
                - 5
              properties:
                "1":
                  type: integer
                  minimum: 0
                "2":
                  type: integer
                  minimum: 0
                "3":
                  type: integer
                  minimum: 0
                "4":
                  type: integer
                  minimum: 0
                "5":
                  type: integer
                  minimum: 0
            average:
              type: number
              minimum: 0
              maximum: 5
  ProductTestStatisticResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/ProductTestStatisticItem'
  ProductTestStatisticItem:
    type: object
    required:
      - product_test_uuid
      - statistics
    properties:
      product_test_uuid:
        type: string
        format: uuid
      statistics:
        type: object
        properties:
          participation_requests_count:
            type: integer
          participants_count:
            type: integer
          reviews_count:
            type: integer
          average_rating:
            type: number
            minimum: 0
            maximum: 5
  ProductStatisticResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/ProductStatisticItem'
  ProductStatisticItem:
    type: object
    required:
    - external_id
    - name
    - link
    - categories
    - tags
    - statistics
    properties:
      external_id:
        type: string
      name:
        type: string
      link:
        type: string
      categories:
        type: array
        items:
          type: string
      tags:
        type: array
        items:
          type: string
      statistics:
        type: object
        properties:
          reviews_count:
            type: integer
          average_rating:
            type: number
            minimum: 0
            maximum: 5
  ParticipationRequest:
    allOf:
      - $ref: '#/definitions/ModelWithUUID'
      - $ref: '#/definitions/ModelWithCurrentUserVoteID'
      - $ref: '#/definitions/ModelWithTimestamps'
      - type: object
        required:
          - user
          - status
          - field_values
          - statistics
        properties:
          title:
            type: string
          description:
            type: string
          attachments:
            type: array
            items:
              $ref: '#/definitions/Asset'
              description: Images intended for use as attachments, like pdf documents
          user:
            $ref: '#/definitions/User'
          status:
            type: string
            description: |
              Status of the request.
              Available statuses: `new invited pending confirmed auto_confirmed`
          field_values:
            type: array
            items:
              $ref: '#/definitions/FieldValue'
          statistics:
            type: object
            properties:
              answers_count:
                type: integer
              vote_count:
                type: integer
  ParticipationRequestComments:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Answer'
  Field:
    type: object
    required:
      - id
      - name
      - type
      - is_mandatory
    properties:
      id:
        type: integer
      name:
        type: string
        description: Name of this field
      type:
        type: string
        description: Internal type of the field
      is_mandatory:
        type: boolean
        description: Mandatory or optional flag
      description:
        type: string
        description: description of the Field
  FieldValue:
    type: object
    required:
      - id
      - field
      - value
    properties:
      id:
        type: integer
      field:
        $ref: '#/definitions/Field'
      value:
        type: string
        description: Value of this field
  ParticipationRequestsResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/ParticipationRequest'
  ParticipationRequestsStructureResponse:
    type: object
    properties:
      list:
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/Field'
  Review:
    allOf:
      - $ref: '#/definitions/ModelWithID'
      - $ref: '#/definitions/ModelWithTimestamps'
      - type: object
        required:
          - user
          - language
          - criteria_values
          - title
          - body
          - average_rating
          - statistics
        properties:
          user:
            $ref: '#/definitions/User'
          language:
            $ref: '#/definitions/Language'
          title:
            type: string
            description: /?\ is it used?
          body:
            type: string
            description: /?\ is it used?
          criteria_values:
            type: array
            items:
              $ref: '#/definitions/FieldValue'
          average_rating:
            type: number
            description: Average rating given by user
          statistics:
            type: object
            properties:
              answers_count:
                type: integer
              vote_count:
                type: integer
  ReivewComments:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Answer'
  ReviewStructure:
    type: object
    properties:
      list:
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/Field'
  Language:
    type: object
  ReviewsResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Review'
  Product:
    allOf:
      - $ref: '#/definitions/ModelWithTimestamps'
      - $ref: '#/definitions/ModelWithID'
      - type: object
        required:
          - external_id
          - name
          - description
          - price
          - url
        properties:
          external_id:
            type: string
            description: ID of the product in external system
          name:
            type: string
            description: Name of the product
          description:
            type: string
            description: 'Additional text, description of the product'
          price:
            type: number
            description: Price of the product
          url:
            type: string
            description: URL of the page with the product
  ArticlesResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          oneOf:
            - $ref: '#/definitions/Article'
  TopicsResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Topic'
  AdHocMessagesResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/AdHocMessages'
  AdHocMessages:
    type: object
    properties:
      id:
        type: integer
        description: id of the ad hoc message
      title:
        type: string
        description: title of the ad hoc message
      body:
        type: string
        description: body of the ad hoc message
      enabled:
        type: boolean
        description: ad hoc message is enabled or not
      locale:
        type: string
        description: ad hoc message locale
      created_at:
        type: string
        description: Timestamp of record created
      updated_at:
        type: string
        description: Timestamp of record updated
  FeedbacksResponse:
    type: object
    required:
      - total_count
      - list
      - current_user_feedback
    properties:
      total_count:
        type: integer
        minimum: 0
      current_user_feedback:
        $ref: '#/definitions/Topic'
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Topic'
  QuestionsResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Question'
  AnswersResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Answer'
  AnswersResponseWithPage:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Answer'
      page:
        type: integer
        minimum: 1
  AssetVariant:
    type: object
    required:
      - width
      - height
      - url
    properties:
      width:
        type: integer
        minimum: 10
        maximum: 400
        description: An Integer representing the asset variant width in pixels
      height:
        type: integer
        minimum: 10
        maximum: 400
        description: An Integer representing the asset variant height in pixels
      url:
        type: string
        description: |
          A String representing the file path, relative to the site root (i.e.
          starting with a slash).
  Asset:
    allOf:
      - $ref: '#/definitions/ModelWithTimestamps'
      - $ref: '#/definitions/ModelWithID'
      - type: object
        required:
          - type
          - title
          - variants
          - file
          - url
        properties:
          type:
            type: string
            description: |
              The type of the asset. Possible values are Image, Document, and
              Link.
            default: Image
          title:
            type: string
            description: The title text of the asset
            default: ''
          description:
            type: string
            description: The description text of the asset
            default: ''
          copyright:
            type: string
            description: Copyright holder fo the asset if present
            default: ''
          url:
            type: string
            description: URL of the original file
          uploader:
            $ref: '#/definitions/User'
          variants:
            properties:
              mini:
                $ref: '#/definitions/AssetVariant'
              stream_avatar:
                $ref: '#/definitions/AssetVariant'
              navigation:
                $ref: '#/definitions/AssetVariant'
              small:
                $ref: '#/definitions/AssetVariant'
              medium:
                $ref: '#/definitions/AssetVariant'
              profile:
                $ref: '#/definitions/AssetVariant'
              preview:
                $ref: '#/definitions/AssetVariant'
              attachment:
                $ref: '#/definitions/AssetVariant'
              ad_hoc_message:
                $ref: '#/definitions/AssetVariant'
              article:
                $ref: '#/definitions/AssetVariant'
              tiled_category_list:
                $ref: '#/definitions/AssetVariant'
              category_subscription:
                $ref: '#/definitions/AssetVariant'
              teaser:
                $ref: '#/definitions/AssetVariant'
              teaser_tn:
                $ref: '#/definitions/AssetVariant'
              teaser_sm:
                $ref: '#/definitions/AssetVariant'
              teaser_lg:
                $ref: '#/definitions/AssetVariant'
              teaser_xl:
                $ref: '#/definitions/AssetVariant'
              teaser_small:
                $ref: '#/definitions/AssetVariant'
              teaser_small_tn:
                $ref: '#/definitions/AssetVariant'
              teaser_small_sm:
                $ref: '#/definitions/AssetVariant'
              teaser_small_lg:
                $ref: '#/definitions/AssetVariant'
              teaser_small_xl:
                $ref: '#/definitions/AssetVariant'
              stream_item_featured:
                $ref: '#/definitions/AssetVariant'
              stream_item_featured_tn:
                $ref: '#/definitions/AssetVariant'
              stream_item_featured_sm:
                $ref: '#/definitions/AssetVariant'
              stream_item_featured_lg:
                $ref: '#/definitions/AssetVariant'
              stream_item_featured_xl:
                $ref: '#/definitions/AssetVariant'
              featured_image_preview:
                $ref: '#/definitions/AssetVariant'
              featured_image_preview_tn:
                $ref: '#/definitions/AssetVariant'
              featured_image_preview_sm:
                $ref: '#/definitions/AssetVariant'
              featured_image_preview_lg:
                $ref: '#/definitions/AssetVariant'
              featured_image_preview_xl:
                $ref: '#/definitions/AssetVariant'
              featured_image_preview_square:
                $ref: '#/definitions/AssetVariant'
              tutorial_preview:
                $ref: '#/definitions/AssetVariant'
              tutorial_preview_square:
                $ref: '#/definitions/AssetVariant'
              tutorial_preview_image:
                $ref: '#/definitions/AssetVariant'
              tutorial_image_square:
                $ref: '#/definitions/AssetVariant'
              user_mini:
                $ref: '#/definitions/AssetVariant'
              user_small:
                $ref: '#/definitions/AssetVariant'
              user_medium:
                $ref: '#/definitions/AssetVariant'
              user_big:
                $ref: '#/definitions/AssetVariant'
              user_mega:
                $ref: '#/definitions/AssetVariant'
              user_facebook:
                $ref: '#/definitions/AssetVariant'
              user_mobile_big:
                $ref: '#/definitions/AssetVariant'
              user_facelift_mobile_big:
                $ref: '#/definitions/AssetVariant'
              user_profile:
                $ref: '#/definitions/AssetVariant'
              user_profile_allianz:
                $ref: '#/definitions/AssetVariant'
              user_backend:
                $ref: '#/definitions/AssetVariant'
              user_voted:
                $ref: '#/definitions/AssetVariant'
              user_default:
                $ref: '#/definitions/AssetVariant'
              user_wallpaper:
                $ref: '#/definitions/AssetVariant'
              category_banner_preview:
                $ref: '#/definitions/AssetVariant'
              api_small:
                $ref: '#/definitions/AssetVariant'
              api_medium:
                $ref: '#/definitions/AssetVariant'
              api_large:
                $ref: '#/definitions/AssetVariant'
              media_list_preview:
                $ref: '#/definitions/AssetVariant'
              large:
                $ref: '#/definitions/AssetVariant'
          file:
            type: string
            description: |
              The path of the file, relative to the site root (i.e. starting
              with a slash).
  Assets:
    type: array
    description: |
      An asset is an image, a document, or a link and can be attached to a
      topic, an answer and other objects. An asset object does not contain
      binary data, but references them by URL.
    items:
      $ref: '#/definitions/Asset'
  ProfileImages:
    type: array
    description: |
      An array of image assets that are displayed as profile images. The default
      value is an empty array.
    items:
      $ref: '#/definitions/Asset'
  Wallpapers:
    type: array
    description: |
      An array of image assets that are displayed as background image. The
      default value is an empty array.
    items:
      $ref: '#/definitions/Asset'
  Statistic:
    type: object
    properties:
      vote_count:
        type: number
        description: to be done
        default: 0
  Tier:
    type: object
    properties:
      name:
        type: string
        description: name of the agent group
      position:
        type: number
        description: position of the group
  Vote:
    allOf:
      - $ref: '#/definitions/ModelWithID'
      - $ref: '#/definitions/ModelWithTimestamps'
      - type: object
        required:
          - votable_type
          - votable_id
          - votable
          - user
        properties:
          votable_type:
            type: string
            description: Name of the object that was voted
          votable_id:
            type: integer
            description: id of the object that was voted
          votable:
            $ref: '#/definitions/Topic'
          user:
            $ref: '#/definitions/User'
  Report:
    allOf:
      - $ref: '#/definitions/ModelWithID'
      - $ref: '#/definitions/ModelWithTimestamps'
  Votes:
    type: array
    items:
      $ref: '#/definitions/Vote'
  Tiers:
    type: array
    items:
      $ref: '#/definitions/Tier'
  ModelWithTimestamps:
    type: object
    required:
      - created_at
      - updated_at
    properties:
      created_at:
        type: string
        format: date-time
        description: 'The date and time when the answer was posted, in ISO 8601 format.'
      updated_at:
        type: string
        format: date-time
        description: |
          The date and time when the answer was last updated, in ISO 8601
          format. If the answer was never updated, the value is identical to
          created_at.
  ModelWithID:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
        description: The unique identifier
        minimum: 1
        maximum: 999999
  ModelWithCurrentUserVoteID:
    type: object
    properties:
      current_user_vote_id:
        type: integer
        description: The unique identifier of the Vote of the current user. default is null
        minimum: 1
        maximum: 999999
  ModelWithUUID:
    type: object
    required:
      - uuid
    properties:
      uuid:
        type: string
        description: The unique identifier
        format: uuid
  ModelWithTags:
    type: object
    required:
      - tags
    properties:
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
  ModelWithCategories:
    type: object
    required:
      - categories
    properties:
      categories:
        type: array
        items:
          $ref: '#/definitions/Category'
  ModelWithPrivateGroup:
    type: object
    required:
      - private_group
    properties:
      private_group:
        $ref: '#/definitions/Category'
      private_group_id:
        type: integer
        minimum: 1
        maximum: 999999
  ModelWithPageObject:
    type: object
    required:
      - page_object
    properties:
      page_object:
        type: object
        required:
          - url
          - title
        properties:
          url:
            type: string
            description: URL where the page with the content can be found
          title:
            type: string
            description: Title of the page/product
  ModelWithMood:
    type: object
    required:
      - mood
    properties:
      mood:
        type:
          - integer
          - 'null'
        minimum: 0
        maximum: 4
        example: 3
        description: Value in the range 1 to 4, or what is configured with mood_values.
  ModelWithAnswers:
    type: object
    properties:
      answers:
        type: array
        items:
          $ref: '#/definitions/Answer'
      comments:
        type: array
        items:
          $ref: '#/definitions/Answer'
  ModelWithLanguage:
    type: object
    properties:
      language:
        type: string
        enum:
          - de
          - en
  ModelWithUserRatingInfo:
    type: object
    properties:
      user_rating_info:
        type: object
        description: user given rating
        properties:
          id:
            type: integer
            description: The unique identifier
          value:
            type: integer
            description: user given rating value
  ModelWithRating:
    type: object
    properties:
      rating:
        type: integer
        description: rating the Author gave on this object
      ratings:
        type: object
        properties:
          ratings:
            type: object
            description: user generated ratings broken down in multiple ways
            properties:
              total:
                type: integer
                description: total number os ratings created to this obejct
              minimum:
                type: integer
                description: smallest valid rating, is null when no ratings are created yet
              maximum:
                type: integer
                description: highest valid rating, is null when no ratings are created yet
              valid_values:
                type: array
                description: Array of intergers, which represent the valid values of a rating, default is 0 to 5
                items:
                  - 0
                  - 1
                  - 2
                  - 3
                  - 4
                  - 5
              average:
                type: float
              distribution:
                type: object
                description: an object with one key for each valid_value. The values are the number of ratings with this value.
                properties:
                  '0':
                    type: integer
                    description: Number of ratings with grade 0
                  '1':
                    type: integer
                    description: Number of ratings with grade 1
                  '2':
                    type: integer
                    description: Number of ratings with grade 2
                  '3':
                    type: integer
                    description: Number of ratings with grade 3
                  '4':
                    type: integer
                    description: Number of ratings with grade 4
                  '5':
                    type: integer
                    description: Number of ratings with grade 5
  WidgetContainerStatisticResponse:
    type: object
    required:
      - average
      - '5'
      - '4'
      - '3'
      - '2'
      - '1'
    properties:
      '1':
        type: integer
        description: Number of feedbacks with grade 1
      '2':
        type: integer
        description: Number of feedbacks with grade 2
      '3':
        type: integer
        description: Number of feedbacks with grade 3
      '4':
        type: integer
        description: Number of feedbacks with grade 4
      '5':
        type: integer
        description: Number of feedbacks with grade 5
      average:
        type: number
        description: Average rating of the WidgetContainer
  TagResponse:
    type: object
    required:
      - uuid
      - name
      - slug
    properties:
      uuid:
        type: string
        description: 'Unique UUID of the tag'
      name:
        type: string
        description: 'Name of the tag'
      slug:
        type: string
        description: 'URL representation of the tag'
  TagsResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/TagResponse'
  MostValuableTagResponse:
    type: object
    required:
      - uuid
      - name
      - slug
      - topics_count
    properties:
      uuid:
        type: string
        description: UUID of the tag
      name:
        type: string
        description: Name of the tag
      slug:
        type: string
        description: URL representation of the tag
      topics_count:
        type: integer
        description: Number of topics associated with the tag
  MostValuableTagsResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/MostValuableTagResponse'
  FollowResponse:
    type: object
    required:
      - user
      - followable_uuid
    properties:
      user:
        $ref: '#/definitions/User'
      followable_uuid:
        type: string
        description: 'prefixed uuid of the item followed'
  Activity:
    allOf:
      - $ref: '#/definitions/ModelWithTimestamps'
      - type: object
        required:
          - uuid
          - item_type
          - item_uuid
          - type
        properties:
          uuid:
            type: string
          item:
            oneOf:
              - $ref: '#/definitions/Answer'
              - $ref: '#/definitions/FollowResponse'
              - $ref: '#/definitions/Rating'
              - $ref: '#/definitions/Vote'
          item_uuid:
            type: string
          item_type:
            type: string
            enum:
              - "Answer"
              - "Follow"
              - "Rating"
              - "Vote"
          "type":
            type: string
            enum:
              - 'NewTopicActivity'
              - 'NewAnswerActivity'
              - 'NewSecondLevelCommentActivity'
              - 'NewFollowActivity'
              - 'RateableRatedActivity'
              - 'VoteGivenActivity'
              - 'VoteReceivedActivity'
              - 'SelfVoteActivity'
  ActivitiesResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Activity'
  Rating:
    allOf:
      - $ref: '#/definitions/ModelWithTimestamps'
      - type: object
        required:
          - uuid
          - value
          - rateable_type
        properties:
          uuid:
            type: string
            description: UUID of the rating
          value:
            type: integer
            description: has a configurable range, default range is 0..5
            minimum: 0
            maximum: 5
          rateable_type:
            type: string
            enum:
              - Topic
              - FieldValue
          id:
            type: integer
            minimum: 1
          rateable:
            type: object
            description: rated object, expected are all topic types and Field/ciriteria value
            properties:
              uuid:
                type: string
                format: bl-uuid
  DifferentProfile:
    allOf:
      - type: object
        default_exported:
          - uuid
          - url
          - authorized_actions
        required:
          - url
        properties:
          user:
            $ref: '#/definitions/User'
          url:
            type: string
            format: uri
            description: uri of the other profile. this is the only writable property. When writing this property, the http(s):// will be added when not provided.
      - $ref: '#/definitions/ModelWithTimestamps'
      - $ref: '#/definitions/ModelWithUUID'
  DifferentProfilesResponse:
    type: object
    required:
      - total_count
      - list
    properties:
      total_count:
        type: integer
        minimum: 0
      list:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/DifferentProfile'
responses:
  401:
    description: Not Authorized, X-User-Token expired
    schema:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
            description: X-User-Token expired
